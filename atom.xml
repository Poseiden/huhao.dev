<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>胡皓 - 枪炮与代码</title>
  
  <subtitle>从士兵到软件匠人的侃侃而谈</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://huhao.dev/"/>
  <updated>2020-01-12T15:22:09.908Z</updated>
  <id>https://huhao.dev/</id>
  
  <author>
    <name>胡皓</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>领域驱动实战思考（二）：用分段思想改进那些混乱的战略设计和战术设计</title>
    <link href="https://huhao.dev/posts/58fe0824/"/>
    <id>https://huhao.dev/posts/58fe0824/</id>
    <published>2020-01-12T15:22:09.908Z</published>
    <updated>2020-01-12T15:22:09.908Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>2019年，在我<a href="https://huhao.dev/posts/130bb570/">对DDD进行基准化</a>的过程中，遇到过非常多的挑战，其中一个便是：</p><p><strong>DDD的设计过程，到底应该分为多少个阶段？每个阶段做什么事情？</strong></p><p>这个困惑来自于书本上，以及其他咨询师在咨询过程中对于DDD设计和操作的差异：</p><ul><li>有的人会从电梯演讲和用户地图开始做设计和分析；</li><li>有的人会从事件风暴开始做设计和分析；</li><li>有的人会从子域开始做设计和分析；</li><li>有的人会从限界上下文开始做设计和分析；</li><li>有的人会直接从领域建模的聚合、实体、值对象开始做设计和分析；</li><li>当然，还有的人会使用“名词动词法”直接从用例描述开始做设计和分析。</li></ul><p>对于实际的学习者和使用者来说，这种混乱的操作手法所形成的不一致和不流畅体验，对于坚持进行DDD设计和减少吵架来说，简直是一种毁灭性的影响。</p><p>在这个过程中，最让我感触深刻的，是在于大家在落地DDD的时候，使用了大量具有“二义性”的词汇，讽刺的是，这与DDD所强调的统一语言是背道而驰的。</p><p>其中对于上述混乱影响最大的因素之一，就是大家对于DDD的“战略设计”和“战术设计”认知不一致（甚至说是混沌）的问题。</p><p>所以，这篇文章，就是围绕这两个概念，来说一说我是如何在基准化的过程中解决这个问题，统一并形成较为流畅的分段式的设计过程的。</p><a id="more"></a><h2 id="混乱的战略设计和战术设计"><a href="#混乱的战略设计和战术设计" class="headerlink" title="混乱的战略设计和战术设计"></a>混乱的战略设计和战术设计</h2><p>一谈起“战略设计”和“战术设计”，你一定会听到“问题域”、“方案域”、“实现域”等名词。</p><p>我的同事肖然在经过反复理解和提炼之后，曾经提出过一个用于解释“问题与方案”、“战略与战术”的“元模型”：</p><img src="/posts/58fe0824/DDD-Essence.png" class="" width="600" title="从问题&#x2F;解决方案和战略&#x2F;战术维度分析DDD元模型的元素"><p>这个模型其实对于具备多维思维和对DDD有着深入理解的人来说，是一种不错的可视化辅助理解手段（划分的合理性仅供参考）。但是在成为更多的咨询师做DDD咨询或培训时开篇必用的材料之后，事情就变得诡异了。因为这个元模型对于咨询师或者培训师是一个比较好的记忆工具，而不是用来给别人解释的适合的工具。</p><p>当没有意识到这一点的人在使用这个模型给客户解释的时候，会向客户描述成：“问题域的战略设计”、“问题域的战术设计”、“解决方案域的战略设计”以及“解决方案的战术设计”。</p><p>经过实战证明，这种方式不到1分钟，就能让客户及对DDD理论没有深入了解的人晕菜，屡试不爽。</p><h3 id="它们是从哪儿来的？"><a href="#它们是从哪儿来的？" class="headerlink" title="它们是从哪儿来的？"></a>它们是从哪儿来的？</h3><p>在搞清楚这个问题之前，我们先要追本溯源，看看这些概念是从哪里来的。</p><h4 id="问题域-方案域-实现域"><a href="#问题域-方案域-实现域" class="headerlink" title="问题域 / 方案域 / 实现域"></a>问题域 / 方案域 / 实现域</h4><p>什么是问题域？什么是方案域？什么是实现域？</p><p>非常有意思的是，以上名词在我搜索的过程中，能够搜到的结果绝大多数都是和软件系统的业务分析及领域驱动设计相关的，当然他们还有很多不同的翻译或者别称。具体到底最初是哪里定义了这三个词汇，我目前还无从查证。但仅从字面上来说，<strong>这是其实是一个非常自然的，人类解决问题的过程</strong>。</p><p>我不想用书本上或者别人博客里的概念进行重复介绍，我更喜欢用我在做咨询的时候总是会用一个屡试不爽的小测试来让大家体会。</p><p>首先，我会问：</p><blockquote><p>我：“我饿了。”</p></blockquote><p>然后，我会让大家根据这个问题来接一句话去将对话接下去，这时候很多人会这样说：</p><blockquote><p>客户A：“你吃什么？”<br>客户B：“走，一起吃饭去？”<br>客户C：“你想什么时候吃？”<br>……</p></blockquote><p>以上就是绝大多数人所习惯的基于方案而非问题进行回答的方式。但一个更正确的，体现问题驱动的答法应该是：</p><blockquote><p>某善于问题驱动的客户：“你为什么饿了？”</p></blockquote><p>这时候，接下来我的回答有可能是：</p><blockquote><p>我：“我中午加班开会，时间比较紧，下午还要来给大家做工作坊，所以中午没吃饭，现在感觉有些低血糖。”</p></blockquote><p>最后，得到的答案往往就会跟之前有很大不同：</p><blockquote><p>客户A：“要不要我给你找点吃的你先垫一垫？”<br>客户B：“要不我们先暂停工作坊你去吃点东西？”<br>……</p></blockquote><p>在这个例子中，包含几个不同的部分：</p><ul><li>待解决问题：我饿了</li><li>问题澄清的结果：中午加班开会，时间比较紧，下午还要来给大家做工作坊，所以中午没吃饭，现在感觉有些低血糖</li><li>解决方案：先垫一垫 or 暂停工作坊去吃东西</li><li>实现细节：先吃块儿巧克力 or 去外面吃快餐</li></ul><p>让我给予一个简单而非严谨的总结：</p><p><strong>问题需要被澄清，问题澄清的结果决定解决方案，问题往往会有多种解决方案，每种解决方案的落地过程是实现细节。</strong></p><p>那么，所谓的“问题域”无非就是“待解决问题的集合”，“方案域”便是“解决方案的集合”，“实现域”便是“实现细节的集合”。而<strong>“领域驱动”</strong>，其实就是<strong>“问题驱动”</strong>——<strong>从澄清关键业务问题开始，逐渐寻找适合的解决方案，再到确定实现细节的过程。</strong></p><h4 id="战略设计-战术设计"><a href="#战略设计-战术设计" class="headerlink" title="战略设计 / 战术设计"></a>战略设计 / 战术设计</h4><p>说到“战略设计”和“战术设计”，这两个词的来源也非常有意思，让我们来说说。</p><p>（以下仅以国内翻译过的书籍来介绍）</p><h5 id="Eric-Evans最初的解释"><a href="#Eric-Evans最初的解释" class="headerlink" title="Eric Evans最初的解释"></a>Eric Evans最初的解释</h5><p>“战略设计（strategic design）”一词最早来自于2004年Eric Evans最初的《领域驱动设计：软件核心复杂性应对之道》一书的最后一个部分（第四部分：战略设计）。</p><img src="/posts/58fe0824/book-ddd.jpg" class="" width="200" title="《领域驱动设计：软件核心复杂性应对之道》"><p>他的原意是：</p><blockquote><p>战略设计：一种针对系统整体的建模和设计决策。这样的决策影响整个项目，而且必须由团队来制定。</p></blockquote><p>在Eric Evans的书中，战略设计会优先关注限界上下文以及限界上下文之间的协作关系，然后通过精炼的方式得到核心域和通用域等“模式”。而在整个书中，其实有关于统一语言和建模的细节都是在全书的前三个部分讨论的，</p><p>也就是说，在最初的这本书中，并没有“战术设计”一词，而Eric Evans是先说的“战术”后说的“战略”。因为他认为：</p><blockquote><p>随着系统的增长，它会变得越来越复杂，当我们无法通过分析对象来理解系统的时候，就需要掌握一些操纵和理解大模型的技术了。本书的这一部分将介绍一些原则。遵循这些原则，就可以对非常复杂的领域进行建模。大部分这样的决策都需要由团队来制定，甚至需要多个团队共同协商制定。这些决策往往是把设计和策略综合到一起的结果。</p></blockquote><p>换句话说，其实他先是介绍的“简单”的系统的领域驱动设计和建模方法，而在最后才介绍的是“复杂”的系统的领域驱动设计和分析方法。</p><h5 id="Vaughn-Vernon的发展"><a href="#Vaughn-Vernon的发展" class="headerlink" title="Vaughn Vernon的发展"></a>Vaughn Vernon的发展</h5><p>2013年，Vaughn Vernon在实施了很长时间以“实现领域驱动设计”为核心内容的工作坊之后，出版了《实现领域驱动设计》一书，在这本书中，他按照从宏观到微观，从问题到方案再到实现的方式进行了叙述，发展并完善了DDD的理论和概念，当然也引入了“问题空间”和“解决方案空间”这两个词。</p><img src="/posts/58fe0824/book-iddd.jpg" class="" width="200" title="《实现领域驱动设计》"><p>他认为，在DDD的“战略设计中”，还需要考虑“问题空间”和“解决方案空间”这样的维度，其中子域（他在“核心域”和“通用域”之间加入“支撑域”来避免两个极端）属于“战略设计”对于“问题空间”的分析方式，而限界上下文则是属于“战略设计”对于“解决方案空间”的分析方式。</p><p>至于“战术设计”一词，hum……当时还没出现呢……</p><p>那么“战术设计”这个词，到底是什么时候才出现的呢？</p><h5 id="Scott-Millett与Nick-Tune被“忽略”的澄清"><a href="#Scott-Millett与Nick-Tune被“忽略”的澄清" class="headerlink" title="Scott Millett与Nick Tune被“忽略”的澄清"></a>Scott Millett与Nick Tune被“忽略”的澄清</h5><p>说实话，“战术设计”这个大家看到现在基本都已经感受到是什么了的东西，到底什么时候由谁提出的，已经难以追溯，但是，至少有一本书出现了……</p><p>在2015年，Scott Millett和Nick Tune出版了《领域驱动设计模式、原理与实践》一书，这本书更加全面和细致的介绍了在实现DDD的过程中的思考和方法。</p><img src="/posts/58fe0824/book-3pddd.jpg" class="" width="200" title="《领域驱动设计模式、原理与实践》"><p>然而很可惜的是，这一本书的中文版已经“绝版了”，说明至少在中国，大家的注意力都被《实现领域驱动设计》带跑了，逢人便提IDDD（书名的缩写），却很少有人提到前述的这一本（当然，我强烈建议对照看英文版，中文版翻译的实在是……）。</p><p>在这本书中，作者将全书分为了四个部分:</p><ol><li>领域驱动设计的原则与实践</li><li>战略模式：在限界上下文之间通信</li><li>战术模式：创建有效的领域模型</li><li>有效应用程序的设计模式</li></ol><p>至此，在DDD的系列书籍中，终于出现了“战术设计/模式”一词，Scott Millett和Nick Tune把领域模型的设计全部清晰的纳入到了“战术设计”之中。</p><h3 id="为什么大多数人会难以理解？"><a href="#为什么大多数人会难以理解？" class="headerlink" title="为什么大多数人会难以理解？"></a>为什么大多数人会难以理解？</h3><p>好吧，大家能看到这里已经很不容易了，让我来为大家做总结并回答一下为什么大多数人会难以理解前述的两个维度的概念呢？</p><p>我是这么看的，之所以难以理解，问题来自于两个方面，让我们分别来说。</p><h4 id="DDD“依然年轻”"><a href="#DDD“依然年轻”" class="headerlink" title="DDD“依然年轻”"></a>DDD“依然年轻”</h4><p>DDD虽然从2014年开始，截止到刚刚过去的2019年，已经有15年的发展，但是15年来，虽然软件架构和设计的新思想层出不穷，复杂度也越来越高。</p><p>直到2014年，以Martin Fowler为代表，在博客上彻底点燃微服务设计这个“燎原之火”之后，微服务所带来的软件系统的复杂度成倍提升才使得人们又重新关注，并开始根据新的形势认真思考DDD如何落地（到如今，几乎逢领微服务设计的书，必谈DDD）。</p><p>从前面的介绍和几本书的内容发展我们可以看到，DDD思想发展的时间跨越很大，语言和理解的统一也并不顺畅，很多概念的清晰化都是最近几年才密集出现。</p><p>尤其在中国，发展更为滞后。这个圈子里，有机会深入思考和深耕DDD规模化落地的人也不多。</p><p>所以，DDD如何在中国这个能够产出“中台”思想的地方实现规模化落地和创新发展，依然任重而道远。</p><h4 id="概念理解有难度"><a href="#概念理解有难度" class="headerlink" title="概念理解有难度"></a>概念理解有难度</h4><p>让我们回顾这些概念和抽取其中的关键词语，我们会看到这两波东西是完全不同维度的东西：</p><ul><li>解决问题的层次：战略、战术</li><li>解决问题的步骤：问题、方案、实现</li></ul><p>之所以难以理解，是因为这些概念在现有的书籍、文章和实际操作中，是交织在一起的（可以想象一个概念的“大泥球”），而绝大多数人并不擅长（或者说并不熟练）以下三种思维方式：</p><ul><li>问题驱动的思考</li><li>分层思维</li><li>多维思考</li></ul><p>所以我们需要甩开这些概念上的反复纠缠，以更加清晰的阶段划分和渐进式的方法来降低门槛，从而让大多数人能够更加容易的理解和入门。</p><h2 id="更合理的“DDD分段式设计”"><a href="#更合理的“DDD分段式设计”" class="headerlink" title="更合理的“DDD分段式设计”"></a>更合理的“DDD分段式设计”</h2><p>为了更好的对DDD的设计过程进行优化，我们必须要重新审视DDD希望解决的问题：</p><blockquote><p><strong>软件核心复杂性</strong></p></blockquote><p>所谓复杂（Complex），按照<a href="https://en.wikipedia.org/wiki/Cynefin_framework" target="_blank" rel="noopener">Cynefin框架</a>的解释是这样的（这里使用了我的同事李彤欣的版本）：</p><blockquote><p><em>“复杂系统：代表可能有，也可能没有解决方案的系统，充满未知和不确定性。因果关系往往在事后才能感知，刚开始可能毫无头绪。应对方式是探索 - 感知 - 响应。在允许试错的前提下，先做小范围实验和尝试，等待某些规律和指导涌现出来后，再来认知和评估，然后响应。”</em></p></blockquote><p>而从我的观察和理解来说，这种复杂问题最直接的影响就是：<strong>其复杂程度已经超出了个人所能够理解、分析和解决的范围</strong>。我总结了三个针对“复杂性”的典型特征：</p><ul><li>业务流程长</li><li>业务场景多</li><li>业务概念多</li></ul><p>要想解决复杂的问题，首当其冲的不是如何进行分析，而是引入更多的人，利用更多的大脑来共同解决复杂问题。当从一个人变成多个人的时候，那么问题就来了：别人的大脑长在别人的脑袋里，我怎么知道他想的是什么？他所理解的和我理解的一样吗？</p><p>正因为多人共同做事情时，会出现沟通和理解上的障碍，所以，DDD给出了一个关键思想：<strong>统一语言（Ubiquitous Language）</strong>。</p><p><strong>而统一语言的方式，则是通过领域专家与技术专家通力合作，针对业务问题进行协作分析和设计，通过迭代式的探索、发现和碰撞得来的</strong>。</p><p>所以，以统一语言为核心，通过协作设计的方式，对业务问题进行分析和澄清，就应该是DDD设计过程的第一个阶段。在这个阶段中，我们围绕业务问题、场景和流程来进行探索，通过限界上下文寻找概念二义性的边界，划分问题子域，从而在宏观（战略）层面降解系统理解上的复杂度。</p><p>我将这第一个阶段称之为：<strong>DDD分段式协作设计的战略设计阶段</strong>。</p><p>在这个过程中，我们首先需要使用“事件风暴工作坊”的方式，对业务流程进行系统实现视角下的抽象分析。然后，根据分析的结果，对领域概念的二义性边界进行识别，最终划定问题子域。</p><img src="/posts/58fe0824/ddd-3step-1.png" class="" width="600" title="DDD分段式协作设计：战略设计"><p>当这一宏观层的分析和设计结束后，我们就需要降低（细化）一个层面，对问题子域和限界上下文内部进行更细化的分析和抽象，通过领域建模的方式，将业务抽象为以“聚合（Aggregate）”进行封装和隔离的一系列领域模型进行承载。然后，基于系统实现的高阶视角出发，参考云原生的弹性边界需求等输入，初步识别出业务服务的划分，并且识别每个业务服务的对外接口能力。</p><p>我将这第二个阶段，称之为：<strong>DDD分段式协作设计的战术设计阶段</strong>。</p><img src="/posts/58fe0824/ddd-3step-2.png" class="" width="600" title="DDD分段式协作设计：战术设计"><p>需要注意的是，在前两个阶段，我们都依然是通过从宏观到微观（从战略到战术）的方式，对业务问题进行了分层的分析和设计。所以在这两个阶段中，我们是忽略了一切技术实现细节，以防止技术实现细节干扰“领域驱动”的。</p><p>同时，由于“协作设计”需要投入一定的人天进行集中式的封闭设计，所以在成本上难以长时间进行投入，而技术实现的维度和方式又是种类繁多和及其详细的（例如API详细设计、UML设计、数据库设计、运维与部署方案……等等）。</p><p>所以，可以将前两个阶段的产出，交由根据“逆康威定律”划分的不同特性/产品团队，由这些团队进行进一步的详细分析和设计，最终予以实现。</p><p>我将这第三个阶段，称之为：<strong>DDD分段式协作设计的技术实现阶段</strong>。</p><img src="/posts/58fe0824/ddd-3step-3.png" class="" width="600" title="DDD分段式协作设计：技术实现"><p>至此，便有了更加平顺的DDD设计方法。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>根据实践中的思考，以“统一语言”为解决复杂问题的核心目标，以“协作设计”为关键手段，我将DDD的设计过程重新梳理和优化为了以下三个阶段：</p><ol><li><strong>战略设计阶段</strong>：对业务问题进行宏观分析和设计。</li><li><strong>战术设计阶段</strong>：根据战略设计分析结果进行细化和建模。</li><li><strong>技术实现阶段</strong>：根据实现需要进行细化分析和设计。</li></ol><img src="/posts/58fe0824/ddd-3step-0.png" class="" width="600" title="DDD分段式协作设计"><p>在这个过程中，主要的改进方式，首先就是利用分层的手法，通过聚焦从宏观到微观再到具体的方式，降低对抽象的分类方法的关注，化解对两类概念维度的交叉。然后，再通过定义每个阶段要解决的问题，内聚相关的分析方法，使得每个阶段都能有一些在阶段内闭环性的产出。</p><p>这样的话，因为阶段目标清晰且产出内聚，所以可以根据实际需要选择协作设计的深入程度：我遇到过有些客户，因为种种原因，只希望能够先快速的知道我需要根据DDD的思想拆分多少个模块，那么就可以先只做战略设计阶段。如果其中某个模块希望进一步细化指导建模和接口设计，那么就可以继续局部进入到战术设计阶段。最后，再根据实际需要去分团队进行技术实现。</p><p>我们一定要记住：<strong>DDD是通过协作来达成统一语言从而应对复杂性的，组织背景下的软件开发是一种团队集体运动。</strong>。</p><p>所以基于以上观点，我会比较刻意的不提倡以下几种DDD的设计过程：</p><ul><li>先分析子域 / 先分析限界上下文：业务都未澄清，理解和语言都还没统一，怎么能拆明白？</li><li>名词动词法 / 直接进行领域建模：大规模吵架和拍脑袋……</li></ul><p>对于以上的分段式设计方法，经过了一年多的实战检验，证明能够被在绝大多数场景下适配和快速复用。在这里给大家分享了我在这个过程中的思考，抛砖引玉，希望能够有更多DDD的推动者提出宝贵的建议，共同推动DDD在中国的成熟和发展。</p><hr><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul><li><a href="https://huhao.dev/posts/130bb570/">用TDD思想对DDD的协作设计过程进行基准化</a></li><li><a href="https://insights.thoughtworks.cn/subdomain-and-bounded-context/" target="_blank" rel="noopener">当Subdomain遇见Bounded Context</a></li><li><a href="https://en.wikipedia.org/wiki/Cynefin_framework" target="_blank" rel="noopener">Cynefin Framework</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;2019年，在我&lt;a href=&quot;https://huhao.dev/posts/130bb570/&quot;&gt;对DDD进行基准化&lt;/a&gt;的过程中，遇到过非常多的挑战，其中一个便是：&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;DDD的设计过程，到底应该分为多少个阶段？每个阶段做什么事情？&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;这个困惑来自于书本上，以及其他咨询师在咨询过程中对于DDD设计和操作的差异：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;有的人会从电梯演讲和用户地图开始做设计和分析；&lt;/li&gt;
&lt;li&gt;有的人会从事件风暴开始做设计和分析；&lt;/li&gt;
&lt;li&gt;有的人会从子域开始做设计和分析；&lt;/li&gt;
&lt;li&gt;有的人会从限界上下文开始做设计和分析；&lt;/li&gt;
&lt;li&gt;有的人会直接从领域建模的聚合、实体、值对象开始做设计和分析；&lt;/li&gt;
&lt;li&gt;当然，还有的人会使用“名词动词法”直接从用例描述开始做设计和分析。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;对于实际的学习者和使用者来说，这种混乱的操作手法所形成的不一致和不流畅体验，对于坚持进行DDD设计和减少吵架来说，简直是一种毁灭性的影响。&lt;/p&gt;
&lt;p&gt;在这个过程中，最让我感触深刻的，是在于大家在落地DDD的时候，使用了大量具有“二义性”的词汇，讽刺的是，这与DDD所强调的统一语言是背道而驰的。&lt;/p&gt;
&lt;p&gt;其中对于上述混乱影响最大的因素之一，就是大家对于DDD的“战略设计”和“战术设计”认知不一致（甚至说是混沌）的问题。&lt;/p&gt;
&lt;p&gt;所以，这篇文章，就是围绕这两个概念，来说一说我是如何在基准化的过程中解决这个问题，统一并形成较为流畅的分段式的设计过程的。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Domain Driven Development" scheme="https://huhao.dev/categories/Domain-Driven-Development/"/>
    
    
      <category term="DDD" scheme="https://huhao.dev/tags/DDD/"/>
    
  </entry>
  
  <entry>
    <title>领域驱动实战思考（一）：用TDD思想对DDD的协作设计过程进行基准化</title>
    <link href="https://huhao.dev/posts/130bb570/"/>
    <id>https://huhao.dev/posts/130bb570/</id>
    <published>2019-12-21T08:30:28.000Z</published>
    <updated>2020-01-12T15:22:09.908Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>在这一年聚焦DDD设计，尤其是DDD的协作设计工作坊的咨询工作中，我发现很多客户总是反馈说一些咨询师的方法论太模糊且落不了地。而这些咨询师则认为其实方法已经说的很清楚了，觉得是客户的人懒，不想干。</p><p>在客户要求提供标准化输出件、操作手册或方法论指南的时候，这些咨询师们大多都会果断拒绝，而且还觉得客户的要求是违背了敏捷宣言中“可工作的软件胜过面面俱到的文档”的价值观。</p><p>但是，我发现其实并不是这么一回事儿，真正的原因是这些咨询师就没有投入足够的研究，去清晰定义自己所售卖的方法论中到底需要多少个阶段，也没有清晰定义每个阶段的输入输出，以及输入和输出之间到底是怎么一步一步清晰且可复用的推演过去的。</p><p>当客户为此挑战他们时，他们则大多会用一句“By Experience”敷衍过去，其实背后是自己根本解释不清楚。</p><p>结合我过去在ThoughtWorks近4年的人员培养和现场教学经验，唯一的解决方案是我们必须要给出方法论清晰的操作步骤和易于理解的解释。</p><a id="more"></a><h2 id="我的基准化思维框架"><a href="#我的基准化思维框架" class="headerlink" title="我的基准化思维框架"></a>我的基准化思维框架</h2><p>通过仔细的思考和观察，通过利用了概念性思考，我发现协作设计工作坊的过程，非常类似于我们的计算机程序模型：</p><blockquote><p><strong>输入 → 处理 → 输出</strong></p></blockquote><p>客户所希望得到的标准化输出件，其实相当于计算机程序模型中的“输入”和“输出”，而推导和产出两个标准化输出件中的具体步骤，则相当于计算机程序模型中的“处理”过程，即可以视作：</p><blockquote><p><strong>前一个过程的输出件 → 操作步骤 → 该环节的输出件</strong></p></blockquote><p>那如果是这样子的话，我就可以采用对待程序的方式，通过测试驱动开发（TDD）的思想来进行方法论的基准化操作了！</p><p>于是我就做了！</p><h2 id="利用TDD的方式进行DDD设计过程的基准化"><a href="#利用TDD的方式进行DDD设计过程的基准化" class="headerlink" title="利用TDD的方式进行DDD设计过程的基准化"></a>利用TDD的方式进行DDD设计过程的基准化</h2><p>在这一年，通过大大小小十数个咨询项目，我使用了以下过程进行了基准化：</p><ul><li>第一步，我通过在不同客户项目的实践中打磨和定义了每个阶段清晰的输出件，产出了《DDD工作坊准入条件和产出物图例》。这一步就相当于通过Tasking确定程序的输入和输出，以及定义测试驱动开发中的测试用例。</li><li>第二步，在确定了输入输出后，我继续通过不同项目的不断打磨，基准化了每一个阶段的操作步骤，并把每一步细化到概念介绍、操作步骤、过程图例、要点提示四个部分，产出了《DDD工作坊操作手册》。这一步就相当于通过测试驱动的方式，进行了程序“处理”过程的实现，并且还通过小步迭代的方式，对操作过程进行了一遍又一遍的迭代。</li><li>第三步，在整个操作手册完成之后，基于操作手册，重新梳理抽象出了适配这个操作手册的最简单和通常的概念，并从整个宏观上优化和定义了新的DDD分段式设计（战略设计阶段、战术设计阶段、技术实现阶段），解决了之前所有我所参与过的DDD培训所看到的知识体系凌乱，不统一，不顺畅等问题，让概念讲解部分最小化，产出了《DDD工作坊概念讲解》课件。这一步就相当于程序设计和开发过程中，通过高度抽象，进行分层架构并实现架构演进的过程。</li><li>第四步，通过项目开发实践和进一步总结，结合多种以领域为核心的分层架构思想，不断打磨形成了适配整个基准化DDD的<a href="https://github.com/howiehu/ddd-architecture-samples" target="_blank" rel="noopener">基准化代码样例</a>。实现了代码化落地。</li><li>第五步，继续通过不断的实践、打磨和总结，产出《DDD成熟度评估标准》。</li></ul><p>以上全部环节，充分采用和实现了我们对待程序设计所提倡的“简单设计（增量式设计）”思想，不带入任何冗余，以便能够让其他人快速理解和复用。</p><h2 id="结果"><a href="#结果" class="headerlink" title="结果"></a>结果</h2><p>基准化的领域驱动设计产出物如下：</p><ul><li><a href="https://pan.baidu.com/s/10eVNdJ0kN5dPZX1On7V5bg" target="_blank" rel="noopener">《DDD工作坊准入条件和产出物图例》</a>（提取码: 9jza）</li><li><a href="https://pan.baidu.com/s/16zP-QFuljJqQeE4PWovG4g" target="_blank" rel="noopener">《DDD工作坊操作手册》</a>（提取码: uu1d）</li><li><a href="https://pan.baidu.com/s/1PnXfqr1RsGG-z9QXTGY4Uw" target="_blank" rel="noopener">《DDD工作坊概念讲解》</a>（提取码: b4ft）</li><li><a href="https://github.com/howiehu/ddd-architecture-samples" target="_blank" rel="noopener">《DDD基准化代码结构样例》</a></li><li>《DDD成熟度评估标准》(还在完善中，请期待)</li></ul><p>对于这些基准化的产出，我已经通过带领7个新咨询师进行了可复用性的验证，这些新咨询师只需要通过我讲解或示范一遍，就能够独立承担后续的DDD设计咨询工作，并且还能够实现概念和手法的一致性。</p><p>至于“By Experience”，则只剩操作者个人经验的高低，和智商的天花板了。</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;在这一年聚焦DDD设计，尤其是DDD的协作设计工作坊的咨询工作中，我发现很多客户总是反馈说一些咨询师的方法论太模糊且落不了地。而这些咨询师则认为其实方法已经说的很清楚了，觉得是客户的人懒，不想干。&lt;/p&gt;
&lt;p&gt;在客户要求提供标准化输出件、操作手册或方法论指南的时候，这些咨询师们大多都会果断拒绝，而且还觉得客户的要求是违背了敏捷宣言中“可工作的软件胜过面面俱到的文档”的价值观。&lt;/p&gt;
&lt;p&gt;但是，我发现其实并不是这么一回事儿，真正的原因是这些咨询师就没有投入足够的研究，去清晰定义自己所售卖的方法论中到底需要多少个阶段，也没有清晰定义每个阶段的输入输出，以及输入和输出之间到底是怎么一步一步清晰且可复用的推演过去的。&lt;/p&gt;
&lt;p&gt;当客户为此挑战他们时，他们则大多会用一句“By Experience”敷衍过去，其实背后是自己根本解释不清楚。&lt;/p&gt;
&lt;p&gt;结合我过去在ThoughtWorks近4年的人员培养和现场教学经验，唯一的解决方案是我们必须要给出方法论清晰的操作步骤和易于理解的解释。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Domain Driven Development" scheme="https://huhao.dev/categories/Domain-Driven-Development/"/>
    
    
      <category term="DDD" scheme="https://huhao.dev/tags/DDD/"/>
    
      <category term="TDD" scheme="https://huhao.dev/tags/TDD/"/>
    
  </entry>
  
</feed>
