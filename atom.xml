<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>胡皓 - 枪炮与代码</title>
  
  <subtitle>从士兵到软件匠人的侃侃而谈</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://huhao.dev/"/>
  <updated>2020-01-18T10:05:28.000Z</updated>
  <id>https://huhao.dev/</id>
  
  <author>
    <name>胡皓</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>领域驱动实战思考（三）：DDD的分段式协作设计</title>
    <link href="https://huhao.dev/posts/61190ae2/"/>
    <id>https://huhao.dev/posts/61190ae2/</id>
    <published>2020-01-18T10:05:28.000Z</published>
    <updated>2020-01-18T10:05:28.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>在我的<a href="https://huhao.dev/posts/58fe0824/">上一篇文章</a>中，给大家介绍了我在实践中对于DDD设计过程进行梳理的思考。本篇则是向大家整体介绍一下我的“DDD分段式协作设计”的步骤和内容。</p><p>同时，该方法的基准化操作手册，也在曾经的一篇文章中<a href="https://huhao.dev/posts/130bb570/">公开提供了下载</a>，可以作为更细化的内容进行参考和使用。</p><p><strong>由于DDD的相关概念和设计方法极多，相比其他市场上所能见到的操作手法，我在这里向大家所介绍的方法，更加聚焦如何能够确保达到“绝大多数人的60分”， 而非“极少数人的100分”，也就是说，我更加注重的是：</strong></p><ul><li><strong>步骤间的连贯性</strong></li><li><strong>方法的可操作性</strong></li><li><strong>实践的可落地性</strong></li><li><strong>与新技术的匹配性（例如云原生）</strong></li></ul><p><strong>为此，我尽可能的通过实战检验，在一些需要凭借经验进行综合判断的场景，尽可能的提供虽然不完美但是可以降低选择成本的唯一选项或解释，从而争取让一线实施人员避免“二选一”或“看具体情况再说”这样莫能两可的纠结。</strong></p><p>需要说明的是，不同的咨询师在实施DDD的设计过程中手法都不一样，我仅是从我所实施过的咨询项目出发，提供了一种经反复验证可工作的方式，并不代表本方法是唯一正确的。</p><p>在这里仅供参考，也欢迎大家进行交流。</p><a id="more"></a><h2 id="DDD解决的问题和办法"><a href="#DDD解决的问题和办法" class="headerlink" title="DDD解决的问题和办法"></a>DDD解决的问题和办法</h2><p>在介绍分段式设计之前，让我们回顾一下DDD希望解决的问题：</p><blockquote><p><strong>软件核心复杂性</strong></p></blockquote><p>所谓“复杂”，我根据实际观察总结的理解是：</p><ul><li>业务场景多</li><li>业务流程长</li><li>业务概念多</li></ul><p><strong>而具备以上这种特征的业务问题，其复杂度往往都会超出任何单独一个人的大脑所能够理解和处理的范围。</strong></p><p>在过去的单体架构时代，由于业务复杂度和技术复杂度都还处于与今天相比更加“简单”的阶段，所以很多时候，我们可能能够依赖少数“聪明的”系统架构师或者“十倍工程师”来通过“拍脑袋”解决问题。</p><p>而在今天，这个迈向“第四次工业革命”的时代，当“唯一不变的就是变化”所带来的高业务响应力要求，使得业务问题的复杂度越来越高，而技术复杂度也随着云原生和微服务架构产生了几何增长，甚至催生出了DevOps这样的运动时。对于一个要应对复杂业务挑战的大规模企业来说，依赖少数“聪明人”通过“拍脑袋”来解决问题则变得越来越不现实。</p><p>那怎么办才好呢？</p><p>这时候，我们需要做的事情，就是<strong>通过集体的力量来解决问题：</strong></p><ul><li><strong>通过协作的方式消除部门墙和角色墙，共同应对和分析复杂业务问题，设计解决方案，避免少数人“拍脑袋”；</strong></li><li><strong>通过领域驱动的方式，依据业务问题的边界（业务变化的边界）、人员沟通一致性的边界（概念变化的边界）以及弹性伸缩的边界（云原生需求的边界）来架构软件系统，实现业务架构和技术架构相匹配，从而通过业务变化来拉动架构，通过架构来响应业务变化。</strong></li></ul><p>这种设计方式所提倡的方法，与过去的“传统设计方法”（嗯，没错，说的就是瀑布式或者伪敏捷）的区别，如下图所示：</p><p><img src="https://huhao-dev.oss-cn-beijing.aliyuncs.com/2020-01-15-050456.png" alt="DDD与传统设计方法的对比"></p><p>而聚焦到DDD本身，DDD首先强调的就是我们应当从过去一上来就先考虑“数据模型和数据库表怎么设计”这种“面向技术进行架构”的方式，改为优先考虑“我们要解决的问题是什么”这种“面向业务进行架构”的方式。</p><p>为此，Eric Evans提出了如下三个DDD的核心原则，原文（《Domain-Driven Design Reference: Definitions and Pattern Summaries》）和我的解释图如下：</p><blockquote><ol><li><strong>Focus on the core domain.</strong>（聚焦核心域）</li><li><strong>Explore models in a creative collaboration of domain practitioners and software practitioners.</strong>（领域专家和软件专家通过创造性的协作探索模型）</li><li><strong>Speak a ubiquitous language within an explicitly bounded context.</strong>（利用明确且有边界的上下文统一语言）</li></ol></blockquote><p><img src="https://huhao-dev.oss-cn-beijing.aliyuncs.com/2020-01-15-050540.png" alt="DDD核心原则"></p><p>而在DDD思想出现之前，人们进行基于面向对象思想（OO）的系统架构设计的时候，更多的是通过“用例分析法 + SOLID原则 + UML”的方式，基于业务描述中的名词和动词，利用近似“拍脑袋”和“凭经验”的方式来进行建模的，相信但凡长期从事面向对象设计的同行都会有所体会。</p><p>而在DDD思想出现和逐渐发展后，该思想使得人们能够从业务抽象、统一语言和问题域划分等多维度进行“更有套路”的面向对象分析，所以DDD被业内人士评价为：<strong>OO Done Right</strong>（正确的完成面向对象设计），如下图所示：</p><p><img src="https://huhao-dev.oss-cn-beijing.aliyuncs.com/2020-01-15-050542.png" alt="DDD是更有套路的设计方式"></p><h2 id="DDD的分段式协作设计"><a href="#DDD的分段式协作设计" class="headerlink" title="DDD的分段式协作设计"></a>DDD的分段式协作设计</h2><p>在回顾了DDD所解决的问题和办法之后，让我们来看一看如何通过分段式的协作设计来驱动DDD在设计阶段的落地。</p><p>在我所使用的方法中，核心思想是：</p><blockquote><p><strong>通过协作设计，从问题澄清和统一共识出发，逐层递进和细化，实现从业务抽象，到领域建模，再到技术实现的阶段性落地。</strong></p></blockquote><p>由此思想出发，我将分段式设计过程拆分为以下几个阶段：</p><ul><li><strong>战略设计阶段：</strong>业务驱动，忽略技术实现细节，为系统架构设计提供业务边界对齐、弹性边界对齐和投资优先级的信息输入。</li><li><strong>战术设计阶段：</strong>基于战略设计的信息输出，进行进一步的抽象设计，作为战略设计和技术实现的过渡阶段，为技术实现提供基于抽象模型和业务服务划分的输入。</li><li><strong>技术实现阶段：</strong>基于战略设计和战术设计的信息输出，进行技术实现相关的设计，例如：技术性组件补全，技术选型，业务API详细设计，分层架构设计，领域模型类设计，数据库设计，制定测试策略……等等。</li></ul><p>接下来，我来分别说一说各个阶段的内容。</p><h3 id="战略设计"><a href="#战略设计" class="headerlink" title="战略设计"></a>战略设计</h3><p>在战略设计阶段，我们优先关注的是：<strong>开发团队对于业务问题理解上的一致性</strong>。</p><p>在这个过程中，“开发团队”指的是包含了“领域专家”在内的所有软件开发相关的关键角色，例如：客户、产品经理 / 项目经理、用户体验设计师、系统架构师、开发工程师、测试工程师、运维工程师、数据库管理员、安全专家……等等。</p><p>而“领域专家”，则是一个能力上的称呼，而非职务上的某种角色，“领域专家”指的是：<strong>对需要解决的业务问题具备最丰富的领域知识，能够帮助和指导开发团队进行分析和设计的那个人（也可能是多个人的组合）</strong>。</p><p>之所以需要这么完备的人员构成，是因为协作设计的核心是需要将设计过程“前置（Shift Left）”到软件开发价值流的早期，通过深入的碰撞、讨论来形成<strong>共识</strong>，通过共识驱动整个开发的价值流，减少因为缺乏共识导致的扯皮、返工等浪费。</p><p>在该阶段，这些人聚在一起，<strong>忽略技术实现细节</strong>，通过通力协作关注以下几件事：</p><ul><li><strong>业务梳理和抽象：</strong>通过事件风暴工作坊，对现实业务流程进行以系统实现为目的的抽象。</li><li><strong>限界上下文识别：</strong>通过统一语言（消除语言二义性），对抽象概念进行澄清、分类和查漏补缺，从而识别业务边界。</li><li><strong>问题子域识别</strong>：通过对问题域进行识别和澄清，划分问题边界和问题域类型，对架构设计提供投资优先级的参考。</li></ul><h4 id="业务梳理和抽象"><a href="#业务梳理和抽象" class="headerlink" title="业务梳理和抽象"></a>业务梳理和抽象</h4><p>首先，团队需要保证所有人对于业务所要解决的问题、业务场景和业务流程的理解是一致的，而这一点在实际中恰恰是绝大多数团队最为明显的“软肋”。在现实中，每个人脑子里面对于业务的理解都是不一致的，而每个人又无法看到对方的理解长什么样。所以，我们需要通过一种可视化的协作设计方式，利用不同颜色的便利贴、马克笔在大白纸上进行沟通和交流（俗称“糊墙”，我们这些DDD顾问经常自嘲为“糊墙师”）。</p><p>业务抽象可视化的方式有很多种，其中比较著名的是<a href="https://en.wikipedia.org/wiki/Object_Modeling_in_Color" target="_blank" rel="noopener">“四色建模（Color Modeling in Color）”</a>和<a href="https://en.wikipedia.org/wiki/Event_storming" target="_blank" rel="noopener">“事件风暴（Event Storming）”</a>。在这里，我所使用的是入门门槛更低，更“傻瓜”的事件风暴。</p><p>事件风暴是一种用于DDD的协作设计方法。该方法基于现实业务流程，以系统实现为视角，基于领域事件的发生时间线，通过一次只关注一个维度（分离关注点）的分层抽象方式，将现实业务流程进行抽象并转化为系统实现的业务逻辑，这些步骤包括：</p><ul><li>识别领域事件</li><li>识别决策命令</li><li>识别领域名词</li></ul><p><strong>通过使用事件风暴对业务进行梳理和抽象，能够统一团队认知，并为战术设计阶段的领域建模提供直接输入。</strong></p><p><em>PS：我所使用的事件风暴实施过程，由于经过了大量的实战检验、总结和持续调整，已经与事件风暴创造者Alberto Brandolini先生的现有方法大不相同，有关于Alberto版本的事件风暴相关信息，可以<a href="https://www.eventstorming.com/" target="_blank" rel="noopener">查看他的网站</a>。</em></p><p>业务梳理和抽象的产出物，如下图所示：</p><p><img src="https://huhao-dev.oss-cn-beijing.aliyuncs.com/2020-01-15-050210.png" alt="事件风暴"></p><h4 id="限界上下文识别"><a href="#限界上下文识别" class="headerlink" title="限界上下文识别"></a>限界上下文识别</h4><p>在业务梳理和抽象完成后，团队接下来需要做的，是将事件风暴工作坊过程中产出的领域名词和外部系统拿出来，根据概念的相关性和理解上的“二义性”，将它们分门别类，按照“限界上下文（Bounded Context）”划分清楚他们的概念边界。</p><p>限界上下文，是概念的边界，在该边界内，当我们去交流某个业务概念时，不会产生理解和认知上的歧义（二义性），限界上下文是统一语言的重要保证，同时也是业务问题最小粒度的划分。</p><p>然后，团队需要根据限界上下文间概念的依赖关系，对限界上下文进行进一步分析，画出它们之间的依赖关系，以便发现和识别一些典型的“设计坏味道”，例如：</p><ul><li>双向依赖：上下文之间缺少一层未被澄清的上下文，或者两个上下文其实可被合为一个；</li><li>循环依赖：任何一个上下文发生变更，依赖链条上的上下文均需要改变；</li><li>过深的依赖：自身依赖的信息不能直接从依赖者获取到，需要通过依赖者从其依赖的上下文获取并传递，依赖链路过长，依赖链条上的任何一个上下文发生变更，其链条后的任何一个上下文均可能需要改变；</li></ul><p><strong>通过对于限界上下文的划分和依赖关系的识别，团队能够实现软件架构在概念边界上的内聚和解耦。</strong></p><p><em>PS：我使用了限界上下文依赖关系，代替了人们常用的“限界上下文映射（Context Mapping）”，因为限界上下文的7种上下游映射关系，所反映的是团队间的各种协作关系，这一步是一个非常细化的分析过程，在战略设计这种宏观分析阶段，实际中非常难以提前识别和分析，因为很多时候团队都还没有。而绝大多数情况下，我们做限界上下文分析的时候，都是为了能够快速的指导系统业务模块或服务的划分，所以我从<a href="https://c4model.com/" target="_blank" rel="noopener">C4模型（C4 Model）</a>中找到了灵感，进行了简化和代替。</em></p><p>限界上下文识别过程的产出物，如下图所示：</p><p><img src="https://huhao-dev.oss-cn-beijing.aliyuncs.com/2020-01-15-050302.png" alt="限界上下文依赖关系"></p><h4 id="问题子域识别"><a href="#问题子域识别" class="headerlink" title="问题子域识别"></a>问题子域识别</h4><p>在战略设计阶段的最后，团队需要根据限界上下文识别的产出，按照“一个子域负责解决具有一个独立业务价值的问题”的原则，将限界上下文以“切蛋糕”的方式，划分到不同的问题子域（Subdomain）中，并按照以下三种不同的子域类型进行标注：</p><ul><li><strong>核心域（Core Domain）：</strong>是当前产品的核心差异化竞争力，是整个业务的盈利来源和基石，如果核心域不存在，那么整个业务就不能运作。对于核心域，需要投入最优势的资源（包括能力高的人），和做严谨良好的设计。</li><li><strong>通用子域（Generic Subdomain）：</strong>该类问题在界内非常常见，所以很可能有现成的解决方案，通过购买或简单修改的方式就可以使用。</li><li><strong>支撑子域（Supporting Subdomain）：</strong>该类问题解决的是支撑核心域运作的问题，其重要程度不如核心域，又不属于通用子域，具备强烈的个性化需求，难以在业内找到现成的解决方案，需要专门的团队定制开发。</li></ul><p>问题子域，是对业务问题的澄清和划分，同时也是对于资源投入优先级的重要参考，相对限界上下文来说，是对业务问题更大粒度的划分。</p><p><strong>通过对于子域进行识别、划分和类型标注，团队能够实现软件架构在业务边界上的内聚和解耦。</strong></p><p><em>PS：在DDD的概念中，限界上下文和问题子域是两个不同维度的概念，理论上来说并没有相互的依赖关系，为了能够方便操作和降低落地成本，依据实践效果，我刻意的选择了“一个子域包含多个限界上下文，一个上下文不得存在于多个子域”的方式。</em></p><p>问题子域识别过程的产出物，如下图所示：</p><p><img src="https://huhao-dev.oss-cn-beijing.aliyuncs.com/2020-01-15-050316.png" alt="问题子域划分"></p><h3 id="战术设计"><a href="#战术设计" class="headerlink" title="战术设计"></a>战术设计</h3><p>在战术设计阶段，我们优先关注的是：<strong>通过抽象模型和业务模块划分来承载业务抽象，为DDD从战略到实现进行过渡</strong>。</p><p>这时候，团队已经在战略设计阶段完成了对于业务问题的澄清和抽象，需要深入建模细节，探讨软件架构的更细粒度的设计。</p><p>在该阶段，开发团队需要<strong>继续忽略技术实现细节</strong>，做以下几件事：</p><ul><li><strong>领域建模：</strong>针对核心域内的业务概念进行领域建模，通过聚合、实体、值对象的识别，为技术实现中的面向对象设计提供参考。</li><li><strong>业务服务划分：</strong>基于战略设计的输出，结合“云原生思想”、“康威定律”和“逆康威定律”，划分具体的业务服务单元。</li><li><strong>业务服务接口能力识别：</strong>根据领域建模和业务服务划分的输出，确定每一个业务服务单元对外暴露的“必要”接口能力清单（忽略具体的协议、地址和数据结构）。</li></ul><h4 id="领域建模"><a href="#领域建模" class="headerlink" title="领域建模"></a>领域建模</h4><p>领域建模，是通过将业务抽象为以下几种抽象模型的方式，利用模型承载和响应业务的变化：</p><ul><li><strong>聚合（Aggregate）：</strong>负责封装业务逻辑，通过一致性边界和统一语言，内聚决策命令和领域事件，容纳并识别领域名词为以下不同的抽象模型：<ul><li><strong>实体（Entity）：</strong>是聚合的主干，具有唯一标识和生命周期。</li><li><strong>聚合根（Aggregate Root）：</strong>是一种实体，是聚合的根节点。</li><li><strong>值对象（Value Object）：</strong>是实体的附加业务概念，用来描述实体所包含的业务信息。</li></ul></li></ul><p>以上抽象模型，同属领域模型（Domain Model），是对业务的高度抽象，利用抽象模型作为业务和系统实现的核心联系，领域模型封装和承载了全部的业务逻辑，并通过聚合的方式保持业务的“高内聚，低耦合”。</p><p>在后续的技术实现过程中，聚合就是一种文件目录结构（例如：包、命名空间、模块），里面存放了领域模型相关组件及其他的领域层组件，例如：领域服务（Domain Service），工厂（Factory），仓储接口（Repository）等。</p><p>领域建模中的聚合，在承载业务逻辑的同时，是对业务问题最细粒度的澄清和划分，一个限界上下文可能包含多个聚合，一个聚合不能存在于多个限界上下文。</p><p><strong>通过领域建模和对聚合的设计，团队能够实现软件架构在模型层面上的内聚和解耦。</strong></p><p>领域建模过程的产出物，如下图所示：</p><p><img src="https://huhao-dev.oss-cn-beijing.aliyuncs.com/2020-01-15-050342.png" alt="领域建模"></p><h4 id="业务服务识别"><a href="#业务服务识别" class="headerlink" title="业务服务识别"></a>业务服务识别</h4><p>业务服务识别，是为后续系统实现进行的基于业务边界的模块拆分分析，业内常见的拆分方法有：</p><ul><li><strong>基于限界上下文进行拆分：</strong>每个限界上下文为一个服务，优点是每个服务都很小，代码量少；缺点是拆分粒度太细，导致服务数量过多，增加架构设计的复杂度和运维成本。</li><li><strong>基于子域进行拆分：</strong>每个子域为一个服务，优点是服务数量相对较少，架构复杂度和运维成本相对更低；缺点是拆分粒度在某些场景下会非常大，导致单个服务变成“小单体”，增加开发成本和代码分层复杂度。</li><li><strong>基于弹性边界进行拆分：</strong>这个方式是云原生时代新的拆分方式，通过针对服务实例的弹性伸缩的功能性需求或非功能性需求，以弹性边界为决定性参考，结合子域和限界上下文的分析，进行模块拆分。这种方式的优点是，服务粒度和数量适中，更贴近实际需要，开发和运维成本均衡；缺点是引入了一个更贴近运营需求和技术实现的参考维度，增加了系统架构的能力要求和复杂度（这种方法我取自于ThoughtWorks中国区CTO徐昊）。</li></ul><p>从我的实战检验来看，我刻意的选择“基于弹性边界进行拆分”的方式，因为这种方式的说服力更高，性价比也最高，至于对于架构能力和复杂度的要求嘛……对于一个技术顾问和云原生时代的架构师来说，这应该都不是问题才对……</p><p><strong>通过对于业务服务进行划分，团队能够获得对软件架构模块拆分的直接指导，并且还能够依据“逆康威定律”依据架构结果进行开发团队的划分和组建。</strong></p><p>业务服务识别过程的产出物，如下图所示：</p><p><img src="https://huhao-dev.oss-cn-beijing.aliyuncs.com/2020-01-15-050358.png" alt="业务服务划分"></p><h4 id="业务服务接口能力识别"><a href="#业务服务接口能力识别" class="headerlink" title="业务服务接口能力识别"></a>业务服务接口能力识别</h4><p>在识别和划分了业务服务之后，我们需要针对每一个业务服务，基于领域建模时聚合的决策命令，补全和定义每一个业务服务对外暴露的接口能力，这种接口能力一般就是两类：</p><ul><li>写类型的接口能力</li><li>读类型的接口能力</li></ul><p>而在这个过程中，由于我们还是处于协作设计的阶段，忽略具体技术实现细节，所以我们并不关心接口的实现方式，例如：接口的设计风格、接口的协议、接口的地址、接口的数据结构、是否是事件驱动、是否用消息队列、是同步接口还是异步接口等。这些东西都是在后续技术实现阶段进行的更详细的设计过程。</p><p><strong>通过对业务服务的接口能力进行识别，团队能够提前定义业务服务的接口概要设计方案，为后续负责具体开发的团队提供直接的输入，方便他们进行接口的详细设计。</strong></p><p><em>PS：很多老的DDD设计方式，在这时候往往都会使用Swagger来定义基于RESTful Web API的接口，来实现“API驱动开发（API Driven Development）”。一方面正如前述所说，这都是技术实现细节，提前考虑技术实现细节一方面会增加协作设计阶段的成本，另一方面会干扰领域驱动设计的过程。另一方面，当今的微服务，RESTful Web API这种同步接口的设计，已经不再是最优的默认接口设计风格，内部服务间通过gRPC或消息队列进行通信，对前端服务使用GraphQL等技术实现查询式接口，已经逐渐成为了新的趋势，而RESTful Web API则主要用于对外部服务暴露开放接口的场合。所以，我改为了只对接口能力进行识别，忽略技术实现细节。</em></p><p>业务服务接口能力识别过程的产出物，如下图所示：</p><p><img src="https://huhao-dev.oss-cn-beijing.aliyuncs.com/2020-01-15-050408.png" alt="业务服务接口能力识别"></p><h3 id="技术实现"><a href="#技术实现" class="headerlink" title="技术实现"></a>技术实现</h3><p>在完成了战略设计和战术设计之后，需要众多关键角色集中投入的协作设计过程，就告一段落了。剩下的与具体技术要求更紧密的详细设计过程，刻意交由具体负责业务服务开发的团队去进行后续的设计和实现。</p><p>技术实现阶段要做的事情，包括且不限于：</p><ul><li>补全技术组件：补全为了支撑系统实现的关键技术型组件，例如客户端、BFF（Backend for Frontend）、ACL（Anticorruption Layer，防腐层）等，完善系统应用类组件（需要分清应用和基础设施的区别）。</li><li>技术选型：选择适合的技术栈或工具。</li><li>API详细设计：选择适合的通讯方式、API设计风格和开发框架，利用契约测试或可视化文档对API进行详细设计。</li><li>分层架构设计：采用符合领域驱动设计风格（或者其它符合整洁架构思想的）的分层架构思想，设计单个服务的架构。</li><li>领域模型类设计：参考领域模型的设计，利用面向对象的语言设计具体的类。</li><li>持久化设计：参考领域模型的设计和实际的持久化相关指标，对持久化组件（例如数据库）进行选型和设计。</li><li>制定测试策略：针对实际需要和性价比，设计适合的测试策略，以守护架构设计。</li><li>……（其它）</li></ul><p><strong>需要特别注意的是：哪些东西属于技术实现细节？哪些东西属于抽象业务？这个判断将会贯穿整个DDD的分段式协作设计过程，任何过早进行技术实现细节的思考和讨论，都有极大的风险导致领域驱动走偏。</strong></p><p>所以，在实战过程中，我通常采用一个非常有效的方式来提醒大家：</p><p>拉一个写着“绝不提前考虑技术实现”的横幅贴在墙上……</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>以上内容，就是关于我的“DDD分段式协作设计”的介绍，具体的操作步骤和注意事项，欢迎参考<a href="https://huhao.dev/posts/130bb570/">先前文章中提供的操作手册</a>。</p><p>当然，从2020年起，我也开始组织公开的“领域驱动设计练功房”培训课程（收费课程），在这个培训课程中，我们不但会通过实战的方式让大家体会协作设计的过程，也会通过测试驱动开发（TDD）的方式带领大家体验DDD技术实现过程中有关分层设计的方式。</p><p>在培训和线上社群中，我也会更多的分享实战中的案例和经验，为参与的学员答疑解惑：</p><img src="https://huhao-dev.oss-cn-beijing.aliyuncs.com/2020-01-16-123317.jpg" alt="领域驱动设计练功房（第一期）" style="zoom:50%;" /><p>当然，有任何问题和建议，欢迎大家通过文章下方的评论进行交流，同时关注后续文章。</p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul><li><a href="https://huhao.dev/posts/130bb570/">领域驱动实战思考（一）：用TDD思想对DDD的协作设计过程进行基准化</a></li><li><a href="https://huhao.dev/posts/58fe0824/">领域驱动实战思考（二）：用分段思想改进那些混乱的战略设计和战术设计</a></li></ul><hr><h2 id="欢迎关注我的个人公众号"><a href="#欢迎关注我的个人公众号" class="headerlink" title="欢迎关注我的个人公众号"></a>欢迎关注我的个人公众号</h2><p><img src="https://huhao-dev.oss-cn-beijing.aliyuncs.com/2020-01-20-wechat.png" alt="枪炮与玫瑰"></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;在我的&lt;a href=&quot;https://huhao.dev/posts/58fe0824/&quot;&gt;上一篇文章&lt;/a&gt;中，给大家介绍了我在实践中对于DDD设计过程进行梳理的思考。本篇则是向大家整体介绍一下我的“DDD分段式协作设计”的步骤和内容。&lt;/p&gt;
&lt;p&gt;同时，该方法的基准化操作手册，也在曾经的一篇文章中&lt;a href=&quot;https://huhao.dev/posts/130bb570/&quot;&gt;公开提供了下载&lt;/a&gt;，可以作为更细化的内容进行参考和使用。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;由于DDD的相关概念和设计方法极多，相比其他市场上所能见到的操作手法，我在这里向大家所介绍的方法，更加聚焦如何能够确保达到“绝大多数人的60分”， 而非“极少数人的100分”，也就是说，我更加注重的是：&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;步骤间的连贯性&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;方法的可操作性&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;实践的可落地性&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;与新技术的匹配性（例如云原生）&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;为此，我尽可能的通过实战检验，在一些需要凭借经验进行综合判断的场景，尽可能的提供虽然不完美但是可以降低选择成本的唯一选项或解释，从而争取让一线实施人员避免“二选一”或“看具体情况再说”这样莫能两可的纠结。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;需要说明的是，不同的咨询师在实施DDD的设计过程中手法都不一样，我仅是从我所实施过的咨询项目出发，提供了一种经反复验证可工作的方式，并不代表本方法是唯一正确的。&lt;/p&gt;
&lt;p&gt;在这里仅供参考，也欢迎大家进行交流。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Domain Driven Development" scheme="https://huhao.dev/categories/Domain-Driven-Development/"/>
    
    
      <category term="DDD" scheme="https://huhao.dev/tags/DDD/"/>
    
      <category term="战略设计" scheme="https://huhao.dev/tags/%E6%88%98%E7%95%A5%E8%AE%BE%E8%AE%A1/"/>
    
      <category term="战术设计" scheme="https://huhao.dev/tags/%E6%88%98%E6%9C%AF%E8%AE%BE%E8%AE%A1/"/>
    
  </entry>
  
  <entry>
    <title>领域驱动实战思考（二）：用分段思想改进那些混乱的战略设计和战术设计</title>
    <link href="https://huhao.dev/posts/58fe0824/"/>
    <id>https://huhao.dev/posts/58fe0824/</id>
    <published>2020-01-13T14:30:28.000Z</published>
    <updated>2020-01-13T14:30:28.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>2019年，在我<a href="https://huhao.dev/posts/130bb570/">对DDD进行基准化</a>的过程中，遇到过非常多的挑战，其中一个便是：</p><p><strong>DDD的设计过程，到底应该分为多少个阶段？每个阶段做什么事情？</strong></p><p>这个困惑来自于书本上，以及其他咨询师在咨询过程中对于DDD设计和操作的差异：</p><ul><li>有的人会从电梯演讲和用户地图开始做设计和分析；</li><li>有的人会从事件风暴开始做设计和分析；</li><li>有的人会从子域开始做设计和分析；</li><li>有的人会从限界上下文开始做设计和分析；</li><li>有的人会直接从领域建模的聚合、实体、值对象开始做设计和分析；</li><li>当然，还有的人会使用“名词动词法”直接从用例描述开始做设计和分析。</li></ul><p>对于实际的学习者和使用者来说，这种混乱的操作手法所形成的不一致和不流畅体验，对于坚持进行DDD设计和减少吵架来说，简直是一种毁灭性的影响。</p><p>在这个过程中，最让我感触深刻的，是在于大家在落地DDD的时候，使用了大量具有“二义性”的词汇，讽刺的是，这与DDD所强调的统一语言是背道而驰的。</p><p>其中对于上述混乱影响最大的因素之一，就是大家对于DDD的“战略设计”和“战术设计”认知不一致（甚至说是混沌）的问题。</p><p>所以，这篇文章，就是围绕这两个概念，来说一说我是如何在基准化的过程中解决这个问题，统一并形成较为流畅的分段式的设计过程的。</p><a id="more"></a><h2 id="混乱的战略设计和战术设计"><a href="#混乱的战略设计和战术设计" class="headerlink" title="混乱的战略设计和战术设计"></a>混乱的战略设计和战术设计</h2><p>一谈起“战略设计”和“战术设计”，你一定会听到“问题域”、“方案域”、“实现域”等名词。</p><p>我的同事肖然在经过反复理解和提炼之后，曾经提出过一个用于解释“问题与方案”、“战略与战术”的“元模型”：</p><p><img src="https://huhao-dev.oss-cn-beijing.aliyuncs.com/2020-01-13-DDD-Essence.png" alt="从问题/解决方案和战略/战术维度分析DDD元模型的元素"></p><p>这个模型其实对于具备多维思维和对DDD有着深入理解的人来说，是一种不错的可视化辅助理解手段（划分的合理性仅供参考）。但是在成为更多的咨询师做DDD咨询或培训时开篇必用的材料之后，事情就变得诡异了。因为这个元模型对于咨询师或者培训师是一个比较好的记忆工具，而不是用来给别人解释的适合的工具。</p><p>当没有意识到这一点的人在使用这个模型给客户解释的时候，会向客户描述成：“问题域的战略设计”、“问题域的战术设计”、“解决方案域的战略设计”以及“解决方案的战术设计”。</p><p>经过实战证明，这种方式不到1分钟，就能让客户及对DDD理论没有深入了解的人晕菜，屡试不爽。</p><h3 id="它们是从哪儿来的？"><a href="#它们是从哪儿来的？" class="headerlink" title="它们是从哪儿来的？"></a>它们是从哪儿来的？</h3><p>在搞清楚这个问题之前，我们先要追本溯源，看看这些概念是从哪里来的。</p><h4 id="问题域-方案域-实现域"><a href="#问题域-方案域-实现域" class="headerlink" title="问题域 / 方案域 / 实现域"></a>问题域 / 方案域 / 实现域</h4><p>什么是问题域？什么是方案域？什么是实现域？</p><p>非常有意思的是，以上名词在我搜索的过程中，能够搜到的结果绝大多数都是和软件系统的业务分析及领域驱动设计相关的，当然他们还有很多不同的翻译或者别称。具体到底最初是哪里定义了这三个词汇，我目前还无从查证。但仅从字面上来说，<strong>这是其实是一个非常自然的，人类解决问题的过程</strong>。</p><p>我不想用书本上或者别人博客里的概念进行重复介绍，我更喜欢用我在做咨询的时候总是会用一个屡试不爽的小测试来让大家体会。</p><p>首先，我会问：</p><blockquote><p>我：“我饿了。”</p></blockquote><p>然后，我会让大家根据这个问题来接一句话去将对话接下去，这时候很多人会这样说：</p><blockquote><p>客户A：“你吃什么？”<br>客户B：“走，一起吃饭去？”<br>客户C：“你想什么时候吃？”<br>……</p></blockquote><p>以上就是绝大多数人所习惯的基于方案而非问题进行回答的方式。但一个更正确的，体现问题驱动的答法应该是：</p><blockquote><p>某善于问题驱动的客户：“你为什么饿了？”</p></blockquote><p>这时候，接下来我的回答有可能是：</p><blockquote><p>我：“我中午加班开会，时间比较紧，下午还要来给大家做工作坊，所以中午没吃饭，现在感觉有些低血糖。”</p></blockquote><p>最后，得到的答案往往就会跟之前有很大不同：</p><blockquote><p>客户A：“要不要我给你找点吃的你先垫一垫？”<br>客户B：“要不我们先暂停工作坊你去吃点东西？”<br>……</p></blockquote><p>在这个例子中，包含几个不同的部分：</p><ul><li>待解决问题：我饿了</li><li>问题澄清的结果：中午加班开会，时间比较紧，下午还要来给大家做工作坊，所以中午没吃饭，现在感觉有些低血糖</li><li>解决方案：先垫一垫 or 暂停工作坊去吃东西</li><li>实现细节：先吃块儿巧克力 or 去外面吃快餐</li></ul><p>让我给予一个简单而非严谨的总结：</p><p><strong>问题需要被澄清，问题澄清的结果决定解决方案，问题往往会有多种解决方案，每种解决方案的落地过程是实现细节。</strong></p><p>那么，所谓的“问题域”无非就是“待解决问题的集合”，“方案域”便是“解决方案的集合”，“实现域”便是“实现细节的集合”。而<strong>“领域驱动”</strong>，其实就是<strong>“问题驱动”</strong>——<strong>从澄清关键业务问题开始，逐渐寻找适合的解决方案，再到确定实现细节的过程。</strong></p><h4 id="战略设计-战术设计"><a href="#战略设计-战术设计" class="headerlink" title="战略设计 / 战术设计"></a>战略设计 / 战术设计</h4><p>说到“战略设计”和“战术设计”，这两个词的来源也非常有意思，让我们来说说。</p><p>（以下仅以国内翻译过的书籍来介绍）</p><h5 id="Eric-Evans最初的解释"><a href="#Eric-Evans最初的解释" class="headerlink" title="Eric Evans最初的解释"></a>Eric Evans最初的解释</h5><p>“战略设计（strategic design）”一词最早来自于2004年Eric Evans最初的《领域驱动设计：软件核心复杂性应对之道》一书的最后一个部分（第四部分：战略设计）。</p><p><img src="https://huhao-dev.oss-cn-beijing.aliyuncs.com/2020-01-13-book-ddd.jpg" alt="《领域驱动设计：软件核心复杂性应对之道》"></p><p>他的原意是：</p><blockquote><p>战略设计：一种针对系统整体的建模和设计决策。这样的决策影响整个项目，而且必须由团队来制定。</p></blockquote><p>在Eric Evans的书中，战略设计会优先关注限界上下文以及限界上下文之间的协作关系，然后通过精炼的方式得到核心域和通用域等“模式”。而在整个书中，其实有关于统一语言和建模的细节都是在全书的前三个部分讨论的，</p><p>也就是说，在最初的这本书中，并没有“战术设计”一词，而Eric Evans是先说的“战术”后说的“战略”。因为他认为：</p><blockquote><p>随着系统的增长，它会变得越来越复杂，当我们无法通过分析对象来理解系统的时候，就需要掌握一些操纵和理解大模型的技术了。本书的这一部分将介绍一些原则。遵循这些原则，就可以对非常复杂的领域进行建模。大部分这样的决策都需要由团队来制定，甚至需要多个团队共同协商制定。这些决策往往是把设计和策略综合到一起的结果。</p></blockquote><p>换句话说，其实他先是介绍的“简单”的系统的领域驱动设计和建模方法，而在最后才介绍的是“复杂”的系统的领域驱动设计和分析方法。</p><h5 id="Vaughn-Vernon的发展"><a href="#Vaughn-Vernon的发展" class="headerlink" title="Vaughn Vernon的发展"></a>Vaughn Vernon的发展</h5><p>2013年，Vaughn Vernon在实施了很长时间以“实现领域驱动设计”为核心内容的工作坊之后，出版了《实现领域驱动设计》一书，在这本书中，他按照从宏观到微观，从问题到方案再到实现的方式进行了叙述，发展并完善了DDD的理论和概念，当然也引入了“问题空间”和“解决方案空间”这两个词。</p><p><img src="https://huhao-dev.oss-cn-beijing.aliyuncs.com/2020-01-13-book-iddd.jpg" alt="《实现领域驱动设计》"></p><p>他认为，在DDD的“战略设计中”，还需要考虑“问题空间”和“解决方案空间”这样的维度，其中子域（他在“核心域”和“通用域”之间加入“支撑域”来避免两个极端）属于“战略设计”对于“问题空间”的分析方式，而限界上下文则是属于“战略设计”对于“解决方案空间”的分析方式。</p><p>至于“战术设计”一词，hum……当时还没出现呢……</p><p>那么“战术设计”这个词，到底是什么时候才出现的呢？</p><h5 id="Scott-Millett与Nick-Tune被“忽略”的澄清"><a href="#Scott-Millett与Nick-Tune被“忽略”的澄清" class="headerlink" title="Scott Millett与Nick Tune被“忽略”的澄清"></a>Scott Millett与Nick Tune被“忽略”的澄清</h5><p>说实话，“战术设计”这个大家看到现在基本都已经感受到是什么了的东西，到底什么时候由谁提出的，已经难以追溯，但是，至少有一本书出现了……</p><p>在2015年，Scott Millett和Nick Tune出版了《领域驱动设计模式、原理与实践》一书，这本书更加全面和细致的介绍了在实现DDD的过程中的思考和方法。</p><p><img src="https://huhao-dev.oss-cn-beijing.aliyuncs.com/2020-01-13-book-3pddd.jpg" alt="《领域驱动设计模式、原理与实践》"></p><p>然而很可惜的是，这一本书的中文版已经“绝版了”，说明至少在中国，大家的注意力都被《实现领域驱动设计》带跑了，逢人便提IDDD（书名的缩写），却很少有人提到前述的这一本（当然，我强烈建议对照看英文版，中文版翻译的实在是……）。</p><p>在这本书中，作者将全书分为了四个部分:</p><ol><li>领域驱动设计的原则与实践</li><li>战略模式：在限界上下文之间通信</li><li>战术模式：创建有效的领域模型</li><li>有效应用程序的设计模式</li></ol><p>至此，在DDD的系列书籍中，终于出现了“战术设计/模式”一词，Scott Millett和Nick Tune把领域模型的设计全部清晰的纳入到了“战术设计”之中。</p><h3 id="为什么大多数人会难以理解？"><a href="#为什么大多数人会难以理解？" class="headerlink" title="为什么大多数人会难以理解？"></a>为什么大多数人会难以理解？</h3><p>好吧，大家能看到这里已经很不容易了，让我来为大家做总结并回答一下为什么大多数人会难以理解前述的两个维度的概念呢？</p><p>我是这么看的，之所以难以理解，问题来自于两个方面，让我们分别来说。</p><h4 id="DDD“依然年轻”"><a href="#DDD“依然年轻”" class="headerlink" title="DDD“依然年轻”"></a>DDD“依然年轻”</h4><p>DDD虽然从2004年开始，截止到刚刚过去的2019年，已经有15年的发展，但是15年来，虽然软件架构和设计的新思想层出不穷，复杂度也越来越高。</p><p>直到2014年，以Martin Fowler为代表，在博客上彻底点燃微服务设计这个“燎原之火”之后，微服务所带来的软件系统的复杂度成倍提升才使得人们又重新关注，并开始根据新的形势认真思考DDD如何落地（到如今，几乎逢领微服务设计的书，必谈DDD）。</p><p>从前面的介绍和几本书的内容发展我们可以看到，DDD思想发展的时间跨越很大，语言和理解的统一也并不顺畅，很多概念的清晰化都是最近几年才密集出现。</p><p>尤其在中国，发展更为滞后。这个圈子里，有机会深入思考和深耕DDD规模化落地的人也不多。</p><h4 id="概念理解有难度"><a href="#概念理解有难度" class="headerlink" title="概念理解有难度"></a>概念理解有难度</h4><p>让我们回顾这些概念和抽取其中的关键词语，我们会看到这两波东西是完全不同维度的东西：</p><ul><li>解决问题的层次：战略、战术</li><li>解决问题的步骤：问题、方案、实现</li></ul><p>之所以难以理解，是因为这些概念在现有的书籍、文章和实际操作中，是交织在一起的（可以想象一个概念的“大泥球”），而绝大多数人并不擅长（或者说并不熟练）以下三种思维方式：</p><ul><li>问题驱动的思考</li><li>分层思维</li><li>多维思考</li></ul><p>所以我们需要甩开这些概念上的反复纠缠，以更加清晰的阶段划分和渐进式的方法来降低门槛，从而让大多数人能够更加容易的理解和入门。</p><h2 id="更合理的“DDD分段式设计”"><a href="#更合理的“DDD分段式设计”" class="headerlink" title="更合理的“DDD分段式设计”"></a>更合理的“DDD分段式设计”</h2><p>为了更好的对DDD的设计过程进行优化，我们必须要重新审视DDD希望解决的问题：</p><blockquote><p><strong>软件核心复杂性</strong></p></blockquote><p>所谓复杂（Complex），按照<a href="https://en.wikipedia.org/wiki/Cynefin_framework" target="_blank" rel="noopener">Cynefin框架</a>的解释是这样的（这里使用了我的同事李彤欣的版本）：</p><blockquote><p><em>“复杂系统：代表可能有，也可能没有解决方案的系统，充满未知和不确定性。因果关系往往在事后才能感知，刚开始可能毫无头绪。应对方式是探索 - 感知 - 响应。在允许试错的前提下，先做小范围实验和尝试，等待某些规律和指导涌现出来后，再来认知和评估，然后响应。”</em></p></blockquote><p>而从我的观察和理解来说，这种复杂问题最直接的影响就是：<strong>其复杂程度已经超出了个人所能够理解、分析和解决的范围</strong>。我总结了三个针对“复杂性”的典型特征：</p><ul><li>业务流程长</li><li>业务场景多</li><li>业务概念多</li></ul><p>要想解决复杂的问题，首当其冲的不是如何进行分析，而是引入更多的人，利用更多的大脑来共同解决复杂问题。当从一个人变成多个人的时候，那么问题就来了：别人的大脑长在别人的脑袋里，我怎么知道他想的是什么？他所理解的和我理解的一样吗？</p><p>正因为多人共同做事情时，会出现沟通和理解上的障碍，所以，DDD给出了一个关键思想：<strong>统一语言（Ubiquitous Language）</strong>。</p><p><strong>而统一语言的方式，则是通过领域专家与技术专家通力合作，针对业务问题进行协作分析和设计，通过迭代式的探索、发现和碰撞得来的</strong>。</p><p>所以，以统一语言为核心，通过协作设计的方式，对业务问题进行分析和澄清，就应该是DDD设计过程的第一个阶段。在这个阶段中，我们围绕业务问题、场景和流程来进行探索，通过限界上下文寻找概念二义性的边界，划分问题子域，从而在宏观（战略）层面降解系统理解上的复杂度。</p><p>我将这第一个阶段称之为：<strong>DDD分段式协作设计的战略设计阶段</strong>。</p><p>在这个过程中，我们首先需要使用“事件风暴工作坊”的方式，对业务流程进行系统实现视角下的抽象分析。然后，根据分析的结果，对领域概念的二义性边界进行识别，最终划定问题子域。</p><p><img src="https://huhao-dev.oss-cn-beijing.aliyuncs.com/2020-01-13-ddd-3step-1.png" alt="DDD分段式协作设计：战略设计"></p><p>当这一宏观层的分析和设计结束后，我们就需要降低（细化）一个层面，对问题子域和限界上下文内部进行更细化的分析和抽象，通过领域建模的方式，将业务抽象为以“聚合（Aggregate）”进行封装和隔离的一系列领域模型进行承载。然后，基于系统实现的高阶视角出发，参考云原生的弹性边界需求等输入，初步识别出业务服务的划分，并且识别每个业务服务的对外接口能力。</p><p>我将这第二个阶段，称之为：<strong>DDD分段式协作设计的战术设计阶段</strong>。</p><p><img src="https://huhao-dev.oss-cn-beijing.aliyuncs.com/2020-01-13-ddd-3step-2.png" alt="DDD分段式协作设计：战术设计"></p><p>需要注意的是，在前两个阶段，我们都依然是通过从宏观到微观（从战略到战术）的方式，对业务问题进行了分层的分析和设计。所以在这两个阶段中，我们是忽略了一切技术实现细节，以防止技术实现细节干扰“领域驱动”的。</p><p>同时，由于“协作设计”需要投入一定的人天进行集中式的封闭设计，所以在成本上难以长时间进行投入，而技术实现的维度和方式又是种类繁多和及其详细的（例如API详细设计、UML设计、数据库设计、运维与部署方案……等等）。</p><p>所以，可以将前两个阶段的产出，交由根据“逆康威定律”划分的不同特性/产品团队，由这些团队进行进一步的详细分析和设计，最终予以实现。</p><p>我将这第三个阶段，称之为：<strong>DDD分段式协作设计的技术实现阶段</strong>。</p><p><img src="https://huhao-dev.oss-cn-beijing.aliyuncs.com/2020-01-13-ddd-3step-3.png" alt="DDD分段式协作设计：技术实现"></p><p>至此，便有了更加平顺的DDD设计方法。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>根据实践中的思考，以“统一语言”为解决复杂问题的核心目标，以“协作设计”为关键手段，我将DDD的设计过程重新梳理和优化为了以下三个阶段：</p><ol><li><strong>战略设计阶段</strong>：对业务问题进行宏观分析和设计。</li><li><strong>战术设计阶段</strong>：根据战略设计分析结果进行细化和建模。</li><li><strong>技术实现阶段</strong>：根据实现需要进行细化分析和设计。</li></ol><p><img src="https://huhao-dev.oss-cn-beijing.aliyuncs.com/2020-01-13-ddd-3step-0.png" alt="DDD分段式协作设计总览"></p><p>在这个过程中，主要的改进方式，首先就是利用分层的手法，通过聚焦从宏观到微观再到具体的方式，降低对抽象的分类方法的关注，化解对两类概念维度的交叉。然后，再通过定义每个阶段要解决的问题，内聚相关的分析方法，使得每个阶段都能有一些在阶段内闭环性的产出。</p><p>这样的话，因为阶段目标清晰且产出内聚，所以可以根据实际需要选择协作设计的深入程度——我遇到过有些客户，因为种种原因，只希望能够先快速的知道我需要根据DDD的思想拆分多少个模块，那么就可以先只做战略设计阶段。如果其中某个模块希望进一步细化指导建模和接口设计，那么就可以继续局部进入到战术设计阶段。最后，再根据实际需要去分团队进行技术实现。</p><p>我们一定要记住：<strong>DDD是通过协作来达成统一语言从而应对复杂性的，组织背景下的软件开发是一种团队集体运动</strong>。</p><p>所以基于以上观点，我会比较刻意的不提倡以下几种DDD的设计过程：</p><ul><li>先分析子域 / 先分析限界上下文：业务都未澄清，理解和语言都还没统一，怎么能拆明白？</li><li>名词动词法 / 直接进行领域建模：大规模吵架和拍脑袋……</li></ul><p>对于以上的分段式设计方法，经过了一年多的实战检验，证明能够被在绝大多数场景下适配和快速复用。在这里给大家分享了我在这个过程中的思考，抛砖引玉，希望能够有更多DDD的推动者提出宝贵的建议，共同推动DDD在中国的成熟和发展。</p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul><li><a href="https://huhao.dev/posts/130bb570/">用TDD思想对DDD的协作设计过程进行基准化</a></li><li><a href="https://insights.thoughtworks.cn/subdomain-and-bounded-context/" target="_blank" rel="noopener">当Subdomain遇见Bounded Context</a></li><li><a href="https://en.wikipedia.org/wiki/Cynefin_framework" target="_blank" rel="noopener">Cynefin Framework</a></li></ul><hr><h2 id="欢迎关注我的个人公众号"><a href="#欢迎关注我的个人公众号" class="headerlink" title="欢迎关注我的个人公众号"></a>欢迎关注我的个人公众号</h2><p><img src="https://huhao-dev.oss-cn-beijing.aliyuncs.com/2020-01-20-wechat.png" alt="枪炮与玫瑰"></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;2019年，在我&lt;a href=&quot;https://huhao.dev/posts/130bb570/&quot;&gt;对DDD进行基准化&lt;/a&gt;的过程中，遇到过非常多的挑战，其中一个便是：&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;DDD的设计过程，到底应该分为多少个阶段？每个阶段做什么事情？&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;这个困惑来自于书本上，以及其他咨询师在咨询过程中对于DDD设计和操作的差异：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;有的人会从电梯演讲和用户地图开始做设计和分析；&lt;/li&gt;
&lt;li&gt;有的人会从事件风暴开始做设计和分析；&lt;/li&gt;
&lt;li&gt;有的人会从子域开始做设计和分析；&lt;/li&gt;
&lt;li&gt;有的人会从限界上下文开始做设计和分析；&lt;/li&gt;
&lt;li&gt;有的人会直接从领域建模的聚合、实体、值对象开始做设计和分析；&lt;/li&gt;
&lt;li&gt;当然，还有的人会使用“名词动词法”直接从用例描述开始做设计和分析。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;对于实际的学习者和使用者来说，这种混乱的操作手法所形成的不一致和不流畅体验，对于坚持进行DDD设计和减少吵架来说，简直是一种毁灭性的影响。&lt;/p&gt;
&lt;p&gt;在这个过程中，最让我感触深刻的，是在于大家在落地DDD的时候，使用了大量具有“二义性”的词汇，讽刺的是，这与DDD所强调的统一语言是背道而驰的。&lt;/p&gt;
&lt;p&gt;其中对于上述混乱影响最大的因素之一，就是大家对于DDD的“战略设计”和“战术设计”认知不一致（甚至说是混沌）的问题。&lt;/p&gt;
&lt;p&gt;所以，这篇文章，就是围绕这两个概念，来说一说我是如何在基准化的过程中解决这个问题，统一并形成较为流畅的分段式的设计过程的。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Domain Driven Development" scheme="https://huhao.dev/categories/Domain-Driven-Development/"/>
    
    
      <category term="DDD" scheme="https://huhao.dev/tags/DDD/"/>
    
  </entry>
  
  <entry>
    <title>领域驱动实战思考（一）：用TDD思想对DDD的协作设计过程进行基准化</title>
    <link href="https://huhao.dev/posts/130bb570/"/>
    <id>https://huhao.dev/posts/130bb570/</id>
    <published>2019-12-21T08:30:28.000Z</published>
    <updated>2019-12-21T08:30:28.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>在这一年聚焦DDD设计，尤其是DDD的协作设计工作坊的咨询工作中，我发现客户同很多咨询顾问之间总是存在以下冲突：</p><ul><li><strong>体验的“一致性”冲突</strong><ul><li>客户：希望不同的顾问在售卖方法论的时候解释能一致；</li><li>顾问：认为每个人对方法论的认识和理解本身就不同，很难做到一致。</li></ul></li><li><strong>服务的“标准化”冲突</strong><ul><li>客户：希望顾问能够将所售卖的方法论进行标准化；</li><li>顾问：认为顾问所售卖的方法论本身非常灵活，需要 By Experience 依据不同的情况进行适配，标准化是做不到，并且也是不应该做的。</li></ul></li></ul><p>结合我曾经在ThoughtWorks近4年的人员培养和教学经验，和这几年来的咨询经验，我能够理解客户这样要求，是因为希望能够实现方法论的规模化落地。而<strong>在方法论规模化落地的过程中，一个很重要的问题，就是绝大多数能力一般的人，都更习惯于依据“明确的指令”进行工作，而不是依赖自己“有限的经验”和“莫能两可的方法论”</strong>。</p><p>这篇文章就是记录我是如何来解决这个问题的。</p><a id="more"></a><h2 id="我的基准化思维框架"><a href="#我的基准化思维框架" class="headerlink" title="我的基准化思维框架"></a>我的基准化思维框架</h2><p>对DDD这样的方法论进行“按部就班”式的基准化梳理，从而形成“基准化的操作”，以提供“明确的指令”，说起来简单，做起来却没有想象中容易。绝大多数的顾问虽然能够对方法论进行阶段性拆分，但是却没有能够将方法论进行细粒度的拆分和验证。</p><p>从我的观察来看，之所以造成这个问题，主要原因来自几个方面：</p><ul><li><strong>对方法论的深入研究不够：</strong>在售卖方法论的时候，现学现卖。</li><li><strong>缺乏反复的思考和打磨：</strong>缺乏机会进行反复验证和优化，或者注意力不够聚焦。</li></ul><p>还有一个很重要的原因，就是<strong>绝大多数技术顾问可能脱离写代码这件事情太久了，没有意识到对方法论基准化非常像我们开发软件的过程</strong>：</p><ul><li>首先，都是需要从客户需要出发，明确交付目标的价值和内容。</li><li>然后，以Tasking思想和阶段性验收条件为着眼点，将目标拆解为不同的阶段。</li><li>接下来，对每个阶段进行细化的实现，保证每个阶段的验收条件在实现过程中可以通过最简单的方式达成。</li><li>最后，产出第一版最小基准化内容，通过不断的适配和打磨，进行迭代式的改进，或者较大幅度的修改（类似需求变更）。</li></ul><p>更重要的是，以上这个过程，是可以用“测试驱动开发（Test Driven Development）”的思想来做的！</p><h2 id="利用TDD的方式进行DDD设计过程的基准化"><a href="#利用TDD的方式进行DDD设计过程的基准化" class="headerlink" title="利用TDD的方式进行DDD设计过程的基准化"></a>利用TDD的方式进行DDD设计过程的基准化</h2><p>那么，我是怎样用TDD的思想，对DDD的设计过程进行基准化的呢？在这一年，通过大大小小十数个咨询项目，我是这样做的：</p><ul><li>第一步，我通过在不同客户项目的实践中打磨和定义了每个阶段清晰的输出件，产出了《DDD工作坊准入条件和产出物图例》。<strong>这一步就相当于通过Tasking确定程序的输入和输出，以及定义测试驱动开发中的测试用例。</strong></li><li>第二步，在确定了输入输出后，我继续通过不同项目的不断打磨，基准化了每一个阶段的操作步骤，并把每一步细化到概念介绍、操作步骤、过程图例、要点提示四个部分，产出了《DDD工作坊操作手册》。<strong>这一步就相当于通过测试驱动的方式，进行了程序“处理”过程的实现，并且还通过小步迭代的方式，对操作过程进行了一遍又一遍的迭代。</strong></li><li>第三步，在整个操作手册完成之后，基于操作手册，重新梳理抽象出了适配这个操作手册的最简单和通常的概念，并从整个宏观上优化和定义了新的DDD分段式设计（战略设计阶段、战术设计阶段、技术实现阶段），解决了之前所有我所参与过的DDD培训所看到的知识体系凌乱，不统一，不顺畅等问题，让概念讲解部分最小化，产出了《DDD工作坊概念讲解》课件。<strong>这一步就相当于程序设计和开发过程中，通过高度抽象，进行分层架构并实现架构演进的过程。</strong></li><li>第四步，通过项目开发实践和进一步总结，结合多种以领域为核心的分层架构思想，不断打磨形成了适配整个基准化DDD的基准化代码样例（<a href="https://github.com/howiehu/ddd-architecture-samples）。实现了代码化落地。" target="_blank" rel="noopener">https://github.com/howiehu/ddd-architecture-samples）。实现了代码化落地。</a></li><li>第五步，继续通过不断的实践、打磨和总结，产出《DDD成熟度评估标准》。</li></ul><p>这样，就通过实战验证的方式，从确定交付物开始，一步一步的增量式的完成了DDD设计过程的基准化，<strong>这也很像我们做软件设计时通过TDD而达到的“简单设计（增量式设计）”思想。</strong></p><h2 id="结果"><a href="#结果" class="headerlink" title="结果"></a>结果</h2><p><strong>DDD的思想和设计过程，是公开并且没有什么保留意义的，所以，我在这里也选择分享给大家，以便为DDD在中国的落地和完善贡献一份力量。</strong></p><p><strong>同时，我也正在建立一系列的DDD基准化公开材料、社区和培训，我未来会将这些内容逐步发布到Github的“领域驱动”组织之中，地址如下：</strong></p><ul><li><strong><a href="https://github.com/domain-driven" target="_blank" rel="noopener">https://github.com/domain-driven</a></strong></li></ul><p>而文章中所说的基准化的领域驱动设计产出物如下，未来我会继续进行不断的打磨和优化：</p><ul><li><a href="https://pan.baidu.com/s/10eVNdJ0kN5dPZX1On7V5bg" target="_blank" rel="noopener">《DDD工作坊准入条件和产出物图例》</a>（提取码: 9jza）</li><li><a href="https://pan.baidu.com/s/16zP-QFuljJqQeE4PWovG4g" target="_blank" rel="noopener">《DDD工作坊操作手册》</a>（提取码: uu1d）</li><li><a href="https://pan.baidu.com/s/1PnXfqr1RsGG-z9QXTGY4Uw" target="_blank" rel="noopener">《DDD工作坊概念讲解》</a>（提取码: b4ft）</li><li><a href="https://github.com/howiehu/ddd-architecture-samples" target="_blank" rel="noopener">《DDD基准化代码结构样例》</a></li><li>《DDD成熟度评估标准》(还在完善中，请期待)</li></ul><p>对于这些基准化的产出，我已经通过带领7个新咨询师进行了可复用性的验证，这些新咨询师只需要通过我讲解或示范一遍，就能够独立承担后续的DDD设计咨询工作，并且还能够实现概念和手法的一致性。</p><p>至于“By Experience”，则只剩操作者个人经验的高低，和智商的天花板了。</p><hr><h2 id="欢迎关注我的微信公众号"><a href="#欢迎关注我的微信公众号" class="headerlink" title="欢迎关注我的微信公众号"></a>欢迎关注我的微信公众号</h2><p><img src="https://huhao-dev.oss-cn-beijing.aliyuncs.com/2020-01-20-wechat.png" alt="枪炮与玫瑰"></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;在这一年聚焦DDD设计，尤其是DDD的协作设计工作坊的咨询工作中，我发现客户同很多咨询顾问之间总是存在以下冲突：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;体验的“一致性”冲突&lt;/strong&gt;&lt;ul&gt;
&lt;li&gt;客户：希望不同的顾问在售卖方法论的时候解释能一致；&lt;/li&gt;
&lt;li&gt;顾问：认为每个人对方法论的认识和理解本身就不同，很难做到一致。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;服务的“标准化”冲突&lt;/strong&gt;&lt;ul&gt;
&lt;li&gt;客户：希望顾问能够将所售卖的方法论进行标准化；&lt;/li&gt;
&lt;li&gt;顾问：认为顾问所售卖的方法论本身非常灵活，需要 By Experience 依据不同的情况进行适配，标准化是做不到，并且也是不应该做的。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;结合我曾经在ThoughtWorks近4年的人员培养和教学经验，和这几年来的咨询经验，我能够理解客户这样要求，是因为希望能够实现方法论的规模化落地。而&lt;strong&gt;在方法论规模化落地的过程中，一个很重要的问题，就是绝大多数能力一般的人，都更习惯于依据“明确的指令”进行工作，而不是依赖自己“有限的经验”和“莫能两可的方法论”&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;这篇文章就是记录我是如何来解决这个问题的。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Domain Driven Development" scheme="https://huhao.dev/categories/Domain-Driven-Development/"/>
    
    
      <category term="DDD" scheme="https://huhao.dev/tags/DDD/"/>
    
      <category term="TDD" scheme="https://huhao.dev/tags/TDD/"/>
    
      <category term="基准化" scheme="https://huhao.dev/tags/%E5%9F%BA%E5%87%86%E5%8C%96/"/>
    
  </entry>
  
  <entry>
    <title>从士兵到程序员再到SOHO程序员 (三) - 游击战与阻力</title>
    <link href="https://huhao.dev/posts/b80f0613/"/>
    <id>https://huhao.dev/posts/b80f0613/</id>
    <published>2014-02-28T18:36:37.000Z</published>
    <updated>2014-02-28T18:36:37.000Z</updated>
    
    <content type="html"><![CDATA[<p>自从上一篇文章（<a href="https://huhao.dev/posts/90a65bc6/">《从士兵到程序员再到SOHO程序员 (二) - 求职》</a>）到现在又过去了差不多3个月的时间，也是时候来总结一下这三个月来的经历和经验教训了。</p><p>很多朋友告诉我，前两篇文章带给大家了许多“正能量”和“激情”，但是这一次，我要用我的实际经历来给大家泼泼凉水。 <strong>所有的努力和奋斗在初始阶段都不会是一帆风顺的</strong> ，这个道理你知我知，我也提前有心理准备，但是后来所遇到的很多问题却超出了自己的预想。</p><p>到了现在自己回过头想一想，其实人生的旅途也需要敏捷，所有的变化都是合理的，如果变化过大，说明先前总有哪个地方没做好，埋下了隐患。最后，既然发生了变化，就要勇于去处理解决以及适应变化。</p><p>接下来我会先总结一下这3个月来的工作和成长经历，然后说一说除了工作以外更加重要的现实阻力。</p><a id="more"></a><h2 id="游击战：必经阶段"><a href="#游击战：必经阶段" class="headerlink" title="游击战：必经阶段"></a>游击战：必经阶段</h2><p>这三个月有了两次工作机会，都是创业公司，创业团队，但是都在相互试用之后没能继续下去。为了保护公司隐私，以下不会说太多的工作细节。</p><p>第一家公司的人都充满激情，也非常的诚恳和靠谱。他们的产品已经上线，但是因为公司人事变动，没有全职的开发人员，更没有CTO或者PM这样富有技术经验的人来沟通和规划工作，所以我等于是在半救火的情况下加入的。由于我是刚刚转型到 Ruby on Rails 不久，面对一个缺乏整体设计和必要测试代码的已经上线的现有项目，压力非常大。这些压力或者说是不适合来自于：</p><ul><li>都说实际项目的维护和开发能学到更多的东西，但是这在对技术还不够熟练，且没有人能够及时沟通或者完全没人能帮助你的情况下来说是相当困难的。</li><li>我是唯一的全职开发人员，另一个曾经的技术核心出国留学，沟通时差 + 其他公司人员对技术都缺乏足够的了解，这种情况下可以说是孤立无援。</li><li>项目本身缺乏测试代码，或者可以说是测试根本跑不起来，项目代码耦合度很高，而且已经上线，所以所有的功能性修改对我的技术状况来说都有眼前一黑的感觉。</li><li>开发人员过少，日常维护性工作很多，这对注意力和精力都是一种挑战。</li></ul><p>所以，在相互尝试了一个多月以后，我建议公司寻找足够的，技术能力更强的人来继续开发工作，这份工作机会就这样结束了。</p><p>第二个工作机会是好朋友所在的公司，产品也已上线，正在争取关键性的投资，所以项目进度很紧张。但是由于我这个好朋友的缘故，项目的技术基础非常优秀，TDD做的非常好，换句话说他已经到了“没有测试就不会写代码”的程度。他对技术的要求和工作流程的要求都非常的严格和正规，可以说是相当靠谱的人和项目，能遇到这么规范的项目的机会真的不多。其实我知道自己与实际要求的差距，项目进度压力也很大，所以我一开始是抱着尝试，学习，实践和帮忙的态度去兼职工作的。但是最终则是自己的问题导致了这份工作的结束。</p><p>原因很简单，正当一切都逐渐步入正轨, 自己的技术状态也渐入佳境的时候，家里出了一些非常令人烦恼的状况，导致我不能将精力集中在工作上，而这时候我一边扛着家庭烦恼一边工作，最终将自己搞得内伤，也让项目在关键阶段的一个非常重要的功能延误了。</p><p>虽然好朋友和老板知道情况后都表示理解，但是这样一个严重的失误让我实在是不好意思再继续干下去，也需要时间调整下自己的状态，所以这份工作也在两周前结束了。</p><p>通过这件事，也暴露出来在家办公的一个最大弊端： <strong>工作和生活非常容易混在一起，而且家庭琐事和自己的心情非常容易对工作状态造成极大的影响，因为在家里没办法像在单位那样能够利用环境分散注意力</strong> 。</p><p>以上的两次工作经历让我对我自己的技术水平和状态产生了许许多多疑惑，这个时候，恰逢貔貅团队到西安一游，得到了与 RubyChina 管理员 / RubyConfChina 的组织者 <strong>吕国宁</strong> 进行面对面交流的机会。我将我的疑惑告诉了他，他首先肯定了我选择远程工作的努力，并且对我说了一句话：</p><p><strong>这个阶段很多现在远程工作的朋友都经历过，就是要去不断的游击，寻找最适合自己的项目，当你坚持过几个月之后，就会发现自己的技术水平也提升了，这时你再去面试，能够展现出相当于1到2年 Ruby on Rails 工作经验的技术水平的话, 还愁找不到合适的远程工作吗？</strong></p><p>这句话对我来说受益匪浅，说明我所经历的这些阶段都是正常的，方向是正确的。</p><h2 id="进步：必然产物"><a href="#进步：必然产物" class="headerlink" title="进步：必然产物"></a>进步：必然产物</h2><p>虽然短短3个月的工作经历，都没能长期做下去，但是这3个月中，还是有不少的进步。</p><h3 id="1-技术进步显著"><a href="#1-技术进步显著" class="headerlink" title="1. 技术进步显著"></a>1. 技术进步显著</h3><ul><li>先前所学的所有理论知识都得到了实践，清楚认识到了所存在的不足，也对所学知识有了巩固；</li><li>对所学技术有了更系统和深入的了解，当回过头再去看书的时候，能够有更多眼前一亮或者茅塞顿开的感觉；</li><li>接触到了实际的好的代码与不好的代码，这对于转型到 Ruby on Rails 是非常重要的经验；</li><li>尤其是在好朋友那里工作的经历，让我对规范化的项目有了深刻的认识。</li></ul><h3 id="2-理论知识进一步丰富"><a href="#2-理论知识进一步丰富" class="headerlink" title="2. 理论知识进一步丰富"></a>2. 理论知识进一步丰富</h3><p>这段时间通过边工作变查找相关资料，学习和收集了很多工作中会用到的有用资源，同时还在调整自己状态的过程中看完了以下几本书：</p><ul><li>《Remote》</li><li>《The Rails 4 Way》</li><li>《高效程序员的45个习惯：敏捷开发修炼之道》</li><li>《程序员的思维修炼：开发认知潜能的9堂课》</li></ul><p>这每一本书读完后都会有一种 Level Up 的感觉，也强烈推荐给大家！</p><h2 id="阻力：资金与家庭"><a href="#阻力：资金与家庭" class="headerlink" title="阻力：资金与家庭"></a>阻力：资金与家庭</h2><p>以上说了工作的经历和收获，接下来就要说一说在这三个月中深刻感受到的最大的阻力。</p><h3 id="1-资金压力"><a href="#1-资金压力" class="headerlink" title="1. 资金压力"></a>1. 资金压力</h3><p>资金压力是最关键的问题之一，这取决于你能撑多久，更严重点还会影响到家庭和睦夫妻关系。</p><p>如果你没有任何诸如房租、房贷、车贷、养娃这样的大额固定开支压力的话，那么恭喜你，你的存款将会长久的支持你不断的无忧无虑学习和实践下去，直到你羽翼丰满。</p><p>但是只要你有上述内容的任何一项，那么你就要认真思索一下像我这样去走向SOHO理想是否对你来说适合了：</p><ol><li>你的存款不会支持你太久；</li><li>不要相信父母、老婆、亲戚能够100%的理解和支持你，当遇到由资金压力所产生的你意想不到的问题时，他们会给你更意想不到的压力， 星星之火真的可以燎原；</li></ol><p>如果你有超过一项的上述资金压力时，那么请你千万别像我这样走SOHO这条路，珍爱生命，三思而后行。</p><h3 id="2-家庭-后盾"><a href="#2-家庭-后盾" class="headerlink" title="2. 家庭 == 后盾"></a>2. 家庭 == 后盾</h3><p>资金压力说完了，现在要重点说说家庭，俗话说家庭是你的港湾，也是你坚强的后盾，但是这一切是需要建立在真正的理解和支持你之上的。</p><h4 id="长辈"><a href="#长辈" class="headerlink" title="长辈"></a>长辈</h4><p>这是我遇到的非常现实的一个问题，家里的长辈们在你下决定的时候鼓励你支持你，同时也会告诫你。但是当你遇到困难或者不顺的时候，才会发现在他们心中，你所做的一切都是： <strong>“没有稳定工作”</strong> 。</p><p>接下来的一切话你都不会喜欢听，诸如“三十而立，要真正的立起来”，“追逐梦想没错，但是不能给父母和家庭带来压力”等等……</p><p>其实这里面包含了太多的代沟，也包含了太多的长辈对咱们这个行业的不理解，同时更不会理解你所追求的工作和生活方式。</p><p>我想过让他们去看看《Remote》，但是你们觉得他们会去看吗？所以，笑笑就好，当然也要考虑清楚前面所说的资金压力，你还能撑多久，如果算好即将撑不下去的时候，那么赶紧采取措施吧，有技术不愁找不到好工作。</p><h4 id="夫妻"><a href="#夫妻" class="headerlink" title="夫妻"></a>夫妻</h4><p>其实长辈的影响并不是最主要的，夫妻关系才是根本，所谓家庭是你避风的港湾，家庭是你坚强的后盾，归根到底绝大多数都是说夫妻关系，这方面不多说了，有老婆的自然明白，没老婆的嘛……好好孝敬和哄好父母吧……</p><h2 id="根本原因：自己"><a href="#根本原因：自己" class="headerlink" title="根本原因：自己"></a>根本原因：自己</h2><p>其实总结了那么多，说白了最终还是原因在于自己，这里面不光包含了技术方面，更多的是生活经验，技术问题总是能招到解决的办法，但是生活中出现的问题可就不是那么好解决了。我们往往将很多的注意力放在了自己的理想和技术追求上，但是放在生活上到底有多少呢？</p><p>换句话说，在决定踏上SOHO这条道路之前，你的技术准备和生活准备， <strong>真的准备好了吗</strong> ？</p><h2 id="接下来"><a href="#接下来" class="headerlink" title="接下来"></a>接下来</h2><p>那么接下来我怎么走？其实没有什么可以避讳的，很简单：</p><p>在资金压力达到红线之前，调整好自己的状态，继续不断提高自己的技术水平，努力去寻找真正适合自己的远程工作机会。</p><p>如果成功了，大家会看到续作去总结工作经验。</p><p>如果失败了，大家会看到一个血淋淋的失败案例，算是给大家做一个参考了。</p><p><strong>May the force be with me!</strong></p><hr><h2 id="欢迎关注我的微信公众号"><a href="#欢迎关注我的微信公众号" class="headerlink" title="欢迎关注我的微信公众号"></a>欢迎关注我的微信公众号</h2><p><img src="https://huhao-dev.oss-cn-beijing.aliyuncs.com/2020-01-20-wechat.png" alt="枪炮与玫瑰"></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;自从上一篇文章（&lt;a href=&quot;https://huhao.dev/posts/90a65bc6/&quot;&gt;《从士兵到程序员再到SOHO程序员 (二) - 求职》&lt;/a&gt;）到现在又过去了差不多3个月的时间，也是时候来总结一下这三个月来的经历和经验教训了。&lt;/p&gt;
&lt;p&gt;很多朋友告诉我，前两篇文章带给大家了许多“正能量”和“激情”，但是这一次，我要用我的实际经历来给大家泼泼凉水。 &lt;strong&gt;所有的努力和奋斗在初始阶段都不会是一帆风顺的&lt;/strong&gt; ，这个道理你知我知，我也提前有心理准备，但是后来所遇到的很多问题却超出了自己的预想。&lt;/p&gt;
&lt;p&gt;到了现在自己回过头想一想，其实人生的旅途也需要敏捷，所有的变化都是合理的，如果变化过大，说明先前总有哪个地方没做好，埋下了隐患。最后，既然发生了变化，就要勇于去处理解决以及适应变化。&lt;/p&gt;
&lt;p&gt;接下来我会先总结一下这3个月来的工作和成长经历，然后说一说除了工作以外更加重要的现实阻力。&lt;/p&gt;
    
    </summary>
    
    
      <category term="从士兵到程序员再到咨询师" scheme="https://huhao.dev/categories/%E4%BB%8E%E5%A3%AB%E5%85%B5%E5%88%B0%E7%A8%8B%E5%BA%8F%E5%91%98%E5%86%8D%E5%88%B0%E5%92%A8%E8%AF%A2%E5%B8%88/"/>
    
    
      <category term="freelancer" scheme="https://huhao.dev/tags/freelancer/"/>
    
  </entry>
  
  <entry>
    <title>从士兵到程序员再到SOHO程序员 (二) - 求职</title>
    <link href="https://huhao.dev/posts/90a65bc6/"/>
    <id>https://huhao.dev/posts/90a65bc6/</id>
    <published>2013-12-13T07:46:28.000Z</published>
    <updated>2013-12-13T07:46:28.000Z</updated>
    
    <content type="html"><![CDATA[<p>当我开始写这篇文章的时候，我猛然发现，此时此刻距离我辞职（2013年9月13日）至今刚好整整3个月时间，看来写这样一篇文章是冥冥之中必须干的事儿。</p><p>那么就让我接着上一篇文章继续写下去吧（上一篇文章请见<a href="https://huhao.dev/posts/7d37a609/" title="从士兵到程序员再到SOHO程序员">《从士兵到程序员再到SOHO程序员》</a>）。</p><a id="more"></a><h2 id="三个月的收获"><a href="#三个月的收获" class="headerlink" title="三个月的收获"></a>三个月的收获</h2><p>三个月之前，我制定过一个学习计划：<a href="https://huhao.dev/posts/7842d101/" title="《三个月家里蹲转型 Ruby on Rails + SOHO 计划">《三个月家里蹲转型 Ruby on Rails + SOHO 计划》</a>。</p><p>但是，俗话说得好，计划赶不上变化，在这三个月里我有将近一半的时间在忙于新房装修，跑灵活就业人员社保手续，以及其他杂事上面。</p><p>所以，真正用于学习的时间也就是一个半月左右，回过头来梳理了一下，发现收获的东西倒还是不少的（按照时间先后顺序排列）：</p><h3 id="1-学会并爱上Vim，最终欲罢不能"><a href="#1-学会并爱上Vim，最终欲罢不能" class="headerlink" title="1. 学会并爱上Vim，最终欲罢不能"></a>1. 学会并爱上Vim，最终欲罢不能</h3><p>我是一个工具控，尤其是在写代码这件事情上更是如此。由于先前一直是在搞.NET开发，使用的最多的IDE便是微软的 Visual Studio，所以深受这种高度智能的IDE工具的“照顾”和“坑害”。在我的概念中，只有像电影里那样熟练且飞快的使用纯文本编辑器或者命令行工具的家伙们才是真正的在写代码。接触Ruby on Rails以后，我一直使用的是Sublime Text 2，这也是现在比较流行的编辑器。但是，当我在西安Rubyist社区活动时，亲眼目睹 <strong><em>魏伦（Allen Wei）</em></strong> 同学娴熟飞快的使用Vim进行开发，在被那种行云流水般的操作震撼的五体投地之后，我下定了决心： <strong>欲善其工，必先利其器，在开始后面一系列计划之前，先把Vim学会了再说！</strong></p><p>于是，我利用一周时间，通过以下两个Vim在线学习网站学会了Vim的使用：</p><ul><li><a href="http://vim-adventures.com" target="_blank" rel="noopener" title="VimAdventures">VimAdventures</a></li><li><a href="http://vimgenius.com" target="_blank" rel="noopener" title="VimGenius">VimGenius</a></li></ul><p>随后，我在学习和写代码的过程中，强制要求自己尽可能的使用Vim。到现在为止，我已经能够熟练的使用Vim，并且在自己寻找的一堆Vim插件的帮助下，高效的进行Ruby on Rails开发了，这里秀一下我现在写代码时的屏幕：</p><p><img src="https://huhao-dev.oss-cn-beijing.aliyuncs.com/2020-01-20-26045-7b64477e3c7b7c8b.png" alt="My Vim Editor" title="My Vim Editor"></p><p><strong>总结一下使用Vim的好处：</strong></p><ul><li>在OS X下配合Dash这个工具可以做到双手不离键盘，注意力可以集中，开发效率很高。</li><li>随时随地，不管是Windows、OS X还是Linux，不管是本地还是远程服务器，都可以立刻开始工作。</li></ul><p><strong>以下是我在学习过程中整理的一些资料：</strong></p><ul><li><a href="https://github.com/howiehu/vim_tutorials" target="_blank" rel="noopener" title="My Favorite Vim Tutorials And Tools">《My Favorite Vim Tutorials And Tools》</a></li><li><a href="https://github.com/howiehu/mini-vimtutor" target="_blank" rel="noopener" title="Vim官方教程“精编版”">《Vim官方教程“精编版”》</a></li></ul><h3 id="2-在西安Rubyist社区活动中做了一次技术分享"><a href="#2-在西安Rubyist社区活动中做了一次技术分享" class="headerlink" title="2. 在西安Rubyist社区活动中做了一次技术分享"></a>2. 在西安Rubyist社区活动中做了一次技术分享</h3><p>在辞职之后，紧接着我就在西安Rubyist社区活动中进行了一次有关REST的技术分享，这也是我有史以来在众人面前做的第二次技术分享（第一次是在先前公司内部做的ASP.NET MVC 4技术分享），这次活动是在ThoughtWorks西安公司会议室进行的，人也不少，所以当时挺紧张，不过感觉真的很棒！</p><p><strong>这是分享时制作并使用的PPT，保存在SkyDrive上，可以直接查看和播放：</strong></p><ul><li><a href="http://sdrv.ms/1jWxObp" target="_blank" rel="noopener" title="About REST and RESTful Web API">《About REST and RESTful Web API》</a></li></ul><h3 id="3-回顾和复习先前所学的内容"><a href="#3-回顾和复习先前所学的内容" class="headerlink" title="3. 回顾和复习先前所学的内容"></a>3. 回顾和复习先前所学的内容</h3><p>由于先前所说的原因，<a href="https://huhao.dev/posts/7842d101/" title="《三个月家里蹲转型 Ruby on Rails + SOHO 计划">《三个月家里蹲转型 Ruby on Rails + SOHO 计划》</a>这个里面的内容我只完成了如下两个：</p><ul><li>重读一遍<a href="http://railstutorial-china.org" target="_blank" rel="noopener">《Ruby on Rails Tutorial 3rd Edition》</a></li><li>完整阅读<a href="https://leanpub.com/everydayrailsrspec" target="_blank" rel="noopener">《Everyday Rails Testing with RSpec》</a></li></ul><p>现在回过头来一想，多读书在我目前这个阶段确实不是很重要，以上这两本已经足够用了，看完以后赶快多练手才行，所以也推荐给其他想学Ruby on Rails的朋友这两本书，而且这两本书都有 <strong><em>Andor Chen</em></strong> 同学辛勤翻译的中文版哦！</p><h3 id="4-短时间参与了一个项目"><a href="#4-短时间参与了一个项目" class="headerlink" title="4. 短时间参与了一个项目"></a>4. 短时间参与了一个项目</h3><p>这个项目先前在Ruby China论坛发布过招聘贴，帖子写的非常诚恳，当然其中的人也确实非常诚恳，我一直在关注。</p><p>但是后来加入到项目中后（真正干活的话总共是3天时间），发现困难比想象中要高，主要原因是：</p><ul><li>项目MVP阶段及后续阶段的准备资金不足。</li><li>创业团队没有技术领头人，这在资金不足的情况下使得情况更加紧迫。</li><li>我无法认同项目本身的定位和目标。</li><li>个人准备还是不够充分，所以工作起来有些吃力。</li></ul><p>所以，在我认真思考之后，我认为项目本身的客观实际加上我当时的技术状况使得我的加入有可能加速这个项目的失败，所以我还是退出了。</p><p>通过这个短时间的尝试，让我还是有一些收获的：</p><ul><li>远程工作没有想象中那样简单。</li><li>亲身体验了远程工作，初步总结了一些经验。</li><li>对自己的技术水平有了更加深刻的认识，所以后来花了更多的时间去学习和练习。</li></ul><h3 id="5-参加了RubyConf-China-2013"><a href="#5-参加了RubyConf-China-2013" class="headerlink" title="5. 参加了RubyConf China 2013"></a>5. 参加了RubyConf China 2013</h3><p>RubyConf China 2013是中国Rubyist在2013年的一次最重要的聚会，我很高兴参加了这次会议。</p><p>在这次会议上，我见到了许多先前只在网络上知道的国际国内Ruby社区的精英，同时也震撼于很多工作时间不长的朋友都敢于上台演讲。</p><p>通过参加这次会议，让我收获到：</p><ul><li>对国内Ruby社区的认识更加清晰。</li><li>很多比我还年轻的朋友的出色演讲让我更加坚定了利用Ruby on Rails实现我远程工作的决心。</li><li>认识到自己在这个圈子内的水平处于什么位置。</li><li>英语很重要，作为一个忠实的“听众”，当看到周边朋友们抓住机会就冲上去和大牛们用英语交流的场面我是那个汗颜啊……（不过后来在从北京回西安的高铁上，我和身边的一个澳大利亚哥们儿用英语聊了一路，这才发现原来说英语也没那么困难，而且周围刚工作的小姑娘们对我这英语水平还是报以很崇拜的眼神，好吧这个扯的有点远了……）</li></ul><p><strong>在 RubyConf China 2013 的签售活动上比较幸运的排在第一位与 Dave Thomas 合影留念：</strong></p><p><img src="https://huhao-dev.oss-cn-beijing.aliyuncs.com/2020-01-20-26045-be5d1c952aabee6c.png" alt="2013年10月27日 RubyConfChina 2013 与 Dave Thomas 签售合影" title="2013年10月27日 RubyConfChina 2013 与 Dave Thomas 签售合影"></p><h3 id="6-深入学习Ruby-on-Rails"><a href="#6-深入学习Ruby-on-Rails" class="headerlink" title="6. 深入学习Ruby on Rails"></a>6. 深入学习Ruby on Rails</h3><p>有了先前这些经历，我认识到我的学习上还有很多不足和欠缺，所以我在练手的同时更加深入的去学习了Ruby on Rails的相关知识。</p><p>到目前为止，我已经能够比较完整和系统的建立起了对Ruby on Rails的认识，并且结合多年Web开发经验，对利用Ruby on Rails进行Web开发也不再犯怵了，基本上遇到问题都能够有解决的思路和信心。</p><p>和先前短期参与那个项目时的状态相比，可以说现在我已经是一只翅膀硬了，敢于并期待飞翔的“菜鸟”了！</p><h3 id="7-初步学会iOS开发"><a href="#7-初步学会iOS开发" class="headerlink" title="7. 初步学会iOS开发"></a>7. 初步学会iOS开发</h3><p>对于iOS的学习完全是出于我的兴趣加上对这个行业的认识所决定的。</p><p>现在这个时代是一个移动设备崛起的时代，或者说是一场革命，对于我们Web Developer来说，单单的掌握从前到后的Web开发技术已经不够了，我认为还必须加上移动设备开发才算完整，所以结合我个人对于Apple的喜爱，我选择了iOS开发而不是Android，从我个人来说，如果有一天就算要做Android的东西，我也可能会去选择Xamarin这样自己比较方便过渡的技术。</p><p>目前，我已经在这段时间学习了iOS开发的基本知识，并正在征服CodeSchool的iOS开发课程中，根据当前的进度，应该半个月后就能自己做点小东西玩了。</p><h3 id="8-通过开发西安Rubyist社区网站来实践所学知识"><a href="#8-通过开发西安Rubyist社区网站来实践所学知识" class="headerlink" title="8. 通过开发西安Rubyist社区网站来实践所学知识"></a>8. 通过开发西安Rubyist社区网站来实践所学知识</h3><p>项目GitHub：<a href="https://github.com/xian-rubyists/xian-rubyists-site" target="_blank" rel="noopener">xian-rubyists-site</a></p><p>这是我实践我先前所学Ruby on Rails知识和BDD思想的一个重要途径，由于先前事情太多，所以都是断断续续在做，现在终于有时间做下去了，所以感兴趣的朋友们可以关注下，也算是对我学习成果的一次检验吧。</p><h2 id="寻求一份远程工作"><a href="#寻求一份远程工作" class="headerlink" title="寻求一份远程工作"></a>寻求一份远程工作</h2><p>OK，以上说了说我这三个月以来的收获，现在转入下一个重要的话题：找工作！</p><p>之前一哥们儿在Ruby China上得求职贴令我有了写文章求职的动力：<a href="http://ruby-china.org/topics/15217" target="_blank" rel="noopener">《介绍我的项目 ＋ 找一份工作》</a>，<strong>别看错了，不是我写的啊！:)</strong></p><p>如果您对我感兴趣，并且愿意给我一次实现SOHO程序员理想的机会，那么我希望您能够看完我的三篇文章，这样能够让您对我有更加全面的了解：</p><ul><li><a href="https://huhao.dev/posts/7842d101/" title="《三个月家里蹲转型 Ruby on Rails + SOHO 计划">《三个月家里蹲转型 Ruby on Rails + SOHO 计划》</a></li><li><a href="https://huhao.dev/posts/7d37a609/" title="从士兵到程序员再到SOHO程序员">《从士兵到程序员再到SOHO程序员 (一)》</a></li><li>不用找了，就是这篇文章了。</li></ul><h3 id="我的简要介绍："><a href="#我的简要介绍：" class="headerlink" title="我的简要介绍："></a>我的简要介绍：</h3><ul><li>自动步枪的使用、单兵战术技能、军用车辆驾驶……这样的东西你们应该用不着，就不说了，如果需要用到的话我会很感兴趣……</li><li>从零开始自学成才，有很强的学习能力，所以下面不会列出哪些短时间就能学会的东西</li><li>能够阅读英文技术书籍和进行文字交流，能够进行英语对话（敢说，但是还需要不断提高）</li><li>5年基于ASP.NET的Web开发经验（其中2年ASP.NET MVC）</li><li>2年敏捷团队经验</li><li>2年欧美外包项目经验</li><li>熟练掌握 Windows / OS X / Linux</li><li>TDD / BDD</li><li>HTML5</li><li>CSS3</li><li>Javascript</li><li>JQuery</li><li>CoffeeScript</li><li>Sass</li><li>Ruby on Rails</li><li>iOS</li><li>Git / SVN</li></ul><h3 id="对于工作的希望"><a href="#对于工作的希望" class="headerlink" title="对于工作的希望"></a>对于工作的希望</h3><ul><li><strong>远程工作，远程工作，远程工作……</strong></li><li><strong>靠谱，靠谱，靠谱……</strong></li><li><strong>热爱技术，热爱技术，热爱技术……</strong></li><li><strong>最重要的：认同远程工作，并且充满活力。</strong></li></ul><h3 id="如果您对我感兴趣"><a href="#如果您对我感兴趣" class="headerlink" title="如果您对我感兴趣"></a>如果您对我感兴趣</h3><p>可以通过以下方式与我联系，或者留下您的联系方式：</p><p>Email: huhao艾特outlook.com</p><p>Skype: howiehu （几乎随时都在）</p><p>QQ: 54252159 （一般工作、学习、写代码的时候都不会开）</p><p><strong>我期待着尽早拥有一份能够实现我的个人理想，也能证明我自己能力的工作！</strong></p><hr><h2 id="欢迎关注我的微信公众号"><a href="#欢迎关注我的微信公众号" class="headerlink" title="欢迎关注我的微信公众号"></a>欢迎关注我的微信公众号</h2><p><img src="https://huhao-dev.oss-cn-beijing.aliyuncs.com/2020-01-20-wechat.png" alt="枪炮与玫瑰"></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;当我开始写这篇文章的时候，我猛然发现，此时此刻距离我辞职（2013年9月13日）至今刚好整整3个月时间，看来写这样一篇文章是冥冥之中必须干的事儿。&lt;/p&gt;
&lt;p&gt;那么就让我接着上一篇文章继续写下去吧（上一篇文章请见&lt;a href=&quot;https://huhao.dev/posts/7d37a609/&quot; title=&quot;从士兵到程序员再到SOHO程序员&quot;&gt;《从士兵到程序员再到SOHO程序员》&lt;/a&gt;）。&lt;/p&gt;
    
    </summary>
    
    
      <category term="从士兵到程序员再到咨询师" scheme="https://huhao.dev/categories/%E4%BB%8E%E5%A3%AB%E5%85%B5%E5%88%B0%E7%A8%8B%E5%BA%8F%E5%91%98%E5%86%8D%E5%88%B0%E5%92%A8%E8%AF%A2%E5%B8%88/"/>
    
    
      <category term="freelancer" scheme="https://huhao.dev/tags/freelancer/"/>
    
  </entry>
  
  <entry>
    <title>从士兵到程序员再到SOHO程序员 (一) - 起航</title>
    <link href="https://huhao.dev/posts/7d37a609/"/>
    <id>https://huhao.dev/posts/7d37a609/</id>
    <published>2013-09-14T15:24:00.000Z</published>
    <updated>2013-09-14T15:24:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>2013年9月13日，我从就职了一年半的S公司正式离职，并开始了我梦寐以求的“SOHO程序员”之路。</p><p>这对于我来说，是一次人生道路上的重要选择，在这里，我想分享一下我是如何选择了这条道路的，同时也是对我到目前为止的程序员生涯做一个回顾。</p><a id="more"></a><h2 id="爱好使然"><a href="#爱好使然" class="headerlink" title="爱好使然"></a>爱好使然</h2><p>爱好是驱使我走上程序员道路的源动力，很小的时候家里就有那种用磁带作为数据存储介质的古老电脑，可以说我基本上完整的经历了从80年代后期到如今这段时间内个人电脑的发展历程，而电脑也成为了我生活中必不可缺的重要组成部分，所以从事一个能够与自己爱好相符合的工作是一件非常快乐的事情，而如何能够<strong>让爱好与工作快乐的结合起来</strong>则是我一直所追求的目标。</p><h2 id="士兵生涯"><a href="#士兵生涯" class="headerlink" title="士兵生涯"></a>士兵生涯</h2><p>我的第一份工作是军人，高中毕业，北京，汽车兵，2年义务兵+3年一级士官。这是一个与绝大多数科班程序员所不同的人生道路，甚至很多人根本无法将这两个职业联系到一起去，所以这不同的经历也塑造了我与绝大多数程序员不同的性格、思想和处事方法。</p><p>在5年的军旅生涯中，部队的特殊环境塑造了我受用至今——并且我坚信会受用终身的几个重要品质：<strong>坚韧</strong>、<strong>果断</strong>、<strong>不服输</strong>、<strong>敢吃苦</strong>。另外，还有两个经历给了我特别重要的两件东西：</p><ul><li>一个是长期的部队军级机关工作锻炼了我的<strong>为人处事/社会交往能力</strong>；</li><li>另一个是在两次考军校失败导致职业军人梦想失利后，通过自身努力重新从人生低谷找回自我价值的经历告诉了我，<strong>努力+坚持=回报</strong>。</li></ul><h2 id="北漂程序员"><a href="#北漂程序员" class="headerlink" title="北漂程序员"></a>北漂程序员</h2><p>其实程序员这条路并不是我曾经优先选择的内容，如前面所讲，我的第一理想是做一辈子军人，在当时，程序员这个选项应该是排在前三以外的。</p><p>走上这条路，完全是机缘巧合。2007年初，在我一级士官即将服役期满的时候，我父亲的好友（也是对我影响最大的人之一）给我了一个到他的公司当程序员的机会，同时也告诉我了一句相当重要的话：<strong>如果你不把自己最喜爱的爱好当专业来干，那么就是在浪费时间。</strong></p><p>所以，我开始学编程也就是从那时开始的。</p><p>我的编程入门语言是在部队服役后期突击学习的Delphi，只可惜2007年的Delphi已经进入晚年，除了很多老软件公司还在使用它来维护已有产品以外，国内的软件行业已经是Java和.NET的天下，但是不管怎样，Delphi让我第一次了解了编程是怎样的。</p><p>2008年，退伍后的我加入了父亲好友的E公司，由于公司发展和业务需要，我从刚刚入门还远未熟练的Delphi转型到.NET平台，开始使用C#进行WinForm开发。</p><p>但是这一年的我，对编程并没有产生真正的兴趣，学习也并不主动，可以说浪费了很多的时间。另外，因为先前所说过的部队经历让我的人际交往能力比公司其他同事更强，所以我做的更多的实际上是项目调研、需求分析、产品维护这样的工作。但是现在想一想，其实这些工作对现在的我来说十分的重要，因为通过这些工作，我<strong>走遍了半个中国的省会城市</strong>，让我在5年的部队封闭生活之后<strong>开拓了眼界，接触了各种人和事</strong>，同时还积累了大量<strong>客户需求与分析工作的经验</strong>。</p><p>2010年，由于国内软件行业的客观环境，以及公司所属某集团公司的内部政策变化，公司的经营遇到了困难。我跟随父亲的好友空降到了H公司——一个隶属于某大型电力建设集团旗下，拥有央企背景的软件公司。</p><p>为了能够顺利的进入这个公司，并符合公司业务需要，在这一年的上半年，我开始学习ASP.NET以及WebForm框架，正式走向Web应用程序的开发道路。但是这个时候的我，依然没有对编程产生真正的兴趣，直到加入H公司之前，我的ASP.NET学习水平仍然非常的基础，仅仅能够达到做简单应用的水平，所以那时候的我对于进入一个“拥有央企背景”的“大软件公司”是相当忐忑不安的。不在父亲好友的建议下，认真学习了那个时候很多.NET程序员都不认真学习的Javascript，所以相对于其他入门级别的ASP.NET程序员来说，我能够做出一些看上去比较“专业”的Web前端效果，这在我进入H公司初期起到了一定的“隐藏真实实力”的效果。</p><h2 id="成长、回家"><a href="#成长、回家" class="headerlink" title="成长、回家"></a>成长、回家</h2><p>加入H公司之后的两个月时间，我在进一步熟悉了解公司情况和业务的同时开始发奋深入学习ASP.NET。可能是因为从小就对电脑特别熟悉的缘故，所以当我真正专心下来学东西的时候，进度变的相当之快，短短两个月时间，已经让我对ASP.NET的了解有了突飞猛进的变化，也让我的信心逐渐增强，在我眼中，我已经与其他同事没有明显的技术差距了。</p><p>但是就在技术实力逐渐丰满的同时，我发现H公司存在有特别严重的问题：公司一把手对技术一窍不通、毫无核心开发能力、技术水平低下、项目管理及其混乱、公司内部勾心斗角……等等。也正是因为这些问题，让我阴差阳错的获得到了一个特别重要的“战略缓冲期”：</p><ul><li>一方面，因为我先前积累的相比公司其他人员更强的社交能力和项目经验，我逐渐走上了项目管理岗位；</li><li>另一方面，坚持不断的学习，让我感觉在技术上，我与身边的人逐渐拉开了距离（我学会JQuery是在广州返回北京的列车上完成的，当时的学习激情和效率相当之高），而这种进步的感觉让我开始对编程逐渐产生兴趣，一发不可收拾。</li></ul><p>2011年，我凭借自己对技术发展的判断，在国内相关资料还很匮乏的情况下，开始购买国外的正版英文PDF教材自学ASP.NET MVC 2，以及很快便推出的ASP.NET MVC 3。通过这样的学习，让我获得了特别重要的几项进步：</p><ul><li>再也不怕看英文教材，这样我能够比他人更早更快更准确的获取并学习新的技术；</li><li>通过对ASP.NET MVC的学习，让我完全从ASP.NET WebForm的传统开发思想上解放了出来，对Web应用程序开发有了更加深入和整体的认识，同时也对流行技术和TDD等思想有了更加全面的了解和学习；</li><li>在学习过程中，了解并学习了敏捷软件开发这个相当重要的东西，并且直接影响到我对软件行业的看法和对未来发展方向的认识。</li></ul><p>2012年初，我已经是项目管理部副主任，正当我努力改变公司项目管理混乱的情况并尝试推行敏捷思想的时候，一场突如其来的由高层勾心斗角引发的栽赃嫁祸砸到了我的头上。此时的我，已对北京的生活压力和个人能力无法完全发挥感到心力交瘁，所以我毅然决然在春节前辞职，凭借之前不断学习积累的技术经验和自学的ASP.NET MVC技术加入了提倡敏捷与个人发展的S公司西安第一分公司，从北京回到了我阔别9年的西安家中。</p><h2 id="煎熬"><a href="#煎熬" class="headerlink" title="煎熬"></a>煎熬</h2><p>2012年3月，S公司，一直到现在我都认为非常不错的公司，践行敏捷，注重个人成长。</p><p>在S公司，我第一次接触了欧美离岸外包项目，以及敏捷实践，在这里让我对敏捷软件开发有了深刻认识和体验，技术水平也有了进一步的提高。可以说，在加入S公司之后的相当长一段时间内，我都是快乐的。</p><p>但是，随着时间的推移，我所在的团队和项目中的一些我无法改变的客观问题逐渐暴露出来：</p><ul><li>由于我所在的项目是西安分公司的第一个大项目，团队组建的比较仓促，招人时要求不够高，技术水平与项目要求存在差距；</li><li>团队成员不愿主动学习技术，尤其是去主动学习流行技术，导致类似JQuery这种东西在一年后依然用的磕磕巴巴，另外很多有益的东西无法推行下去，比如TDD；</li><li>团队成员并不爱好编程，在我看来依旧是把编程当做混饭吃的工具，没有什么技术追求；</li><li>团队成员一些根深蒂固的观念难以扭转，敏捷依然停留在表面形式上，没有扎根到心里，甚至到一年以后，很多敏捷开发中的重要内容，比如CodeReview和回顾都无法坚持做下去；</li></ul><p>这时，通过和公司经理的几次技术交流中，我对Ruby on Rails有了初步的了解（先前只是听说过但没有研究过），在进一步了解的过程中，我逐渐发现Ruby语言和Ruby社区对我的吸引力越来越大，也让我对开源软件和开源文化有了越来越多的认识，以至于最终让我的思想有了彻底的改变：<strong>原来程序员的世界可以这样的快乐和活跃</strong>。</p><p>随着对Ruby及Rails如痴如醉般的不断学习，我感到工作变得越来越不快乐，工作效率也越来越低，这种感觉甚至可以说是是一种煎熬。</p><p>在我看来，这些不快乐是由于以下因素造成的：</p><ul><li>.NET程序员受国内环境以及微软技术的影响，社区活跃度不高，普遍技术水平偏低，对流行技术和思想的接受速度太慢，难以在技术上找到共同语言或者同道中人。</li><li>个人经历所塑造的性格与周围的同事差异太大，虽然尝试不断改变自己，但是这种过程相当艰难，并且很不舒服；</li><li>个人技术进步与团队成员形成的落差（世界上最遥远的距离不是我努力学习，你不努力学习，而是我在努力学习你却认为我是在装逼）。</li><li>因为团队的能力不足，造成项目在交付阶段问题重重，而我个人又无力改变这一切。</li><li>长期拴在一个项目之上，让我无法将业余时间所学的东西用在实际当中。</li></ul><h2 id="自我改变"><a href="#自我改变" class="headerlink" title="自我改变"></a>自我改变</h2><p>既然无法改变环境，那么只能改变自己，我开始寻找能够让自己快乐起来的办法——参加技术社区活动，去寻找志同道合的伙伴。</p><p>2013年，我在ruby-china上结识了Andy Wang和Allen Wei等西安地区的Rubyist，后来大家一拍即合的组织起了Xi’an Rubyist的线下技术交流活动。</p><p>由于Andy和Allen均是SOHO多年的资深Freelancer，在与他们的接触交流过程中，我突然意识到我所学的Ruby和Rails等技术与其他技术不太一样，在社区更加活跃、自由、新潮的同时，还有一项特别实惠的优势：<strong>在家办公的可能性更大</strong>。</p><p>在他们二人的鼓励和支持之下和研究了他们的SOHO经验之后，Ruby on Rails + SOHO这对组合似乎可以成为解决我的煎熬状态的首选解决方案：</p><ul><li>我可以用一个我喜爱的技术来工作，而不是用为工作而选择的技术；</li><li>我可以拥抱一个崇尚技术的社区，找到志同道合的人，选择自己喜爱的团队；</li><li>我可以享受SOHO带来的一系列提升生活质量的好处（至于都有什么好处，ruby-china上已经有很多经典帖子来说明了，在此不再重复）；</li></ul><p>换句话说，是时候走出我的舒适区了，我需要再一次改变，<strong>技术在身，无可畏惧</strong>。</p><p>所以，在持续了五个月的疯狂学习之后，我选择了辞职，走上了SOHO程序员之路。</p><h2 id="在路上"><a href="#在路上" class="headerlink" title="在路上"></a>在路上</h2><p>现在，我在家中，心情舒畅，没有了天天堵车上班的痛苦，也没有了先前的烦恼。</p><p>写下这篇文章，作为<a href="https://huhao.dev/posts/7842d101/">SOHO程序员之路的开始</a>，我知道后面的道路会有以前不曾有过的各种困难和挑战，但是我很喜欢Terry Tai同学分享给我的一句话：</p><p><strong>“当你决定出发，最大的困难已不复存在！”</strong></p><p>我信，我行！</p><hr><h2 id="欢迎关注我的微信公众号"><a href="#欢迎关注我的微信公众号" class="headerlink" title="欢迎关注我的微信公众号"></a>欢迎关注我的微信公众号</h2><p><img src="https://huhao-dev.oss-cn-beijing.aliyuncs.com/2020-01-20-wechat.png" alt="枪炮与玫瑰"></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;2013年9月13日，我从就职了一年半的S公司正式离职，并开始了我梦寐以求的“SOHO程序员”之路。&lt;/p&gt;
&lt;p&gt;这对于我来说，是一次人生道路上的重要选择，在这里，我想分享一下我是如何选择了这条道路的，同时也是对我到目前为止的程序员生涯做一个回顾。&lt;/p&gt;
    
    </summary>
    
    
      <category term="从士兵到程序员再到咨询师" scheme="https://huhao.dev/categories/%E4%BB%8E%E5%A3%AB%E5%85%B5%E5%88%B0%E7%A8%8B%E5%BA%8F%E5%91%98%E5%86%8D%E5%88%B0%E5%92%A8%E8%AF%A2%E5%B8%88/"/>
    
    
      <category term="freelancer" scheme="https://huhao.dev/tags/freelancer/"/>
    
  </entry>
  
  <entry>
    <title>三个月家里蹲转型 Ruby on Rails + SOHO 计划</title>
    <link href="https://huhao.dev/posts/7842d101/"/>
    <id>https://huhao.dev/posts/7842d101/</id>
    <published>2013-08-26T15:18:00.000Z</published>
    <updated>2013-08-26T15:18:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>本人目前就职于北京盛安德科技发展有限公司西安第一分公司，由于趁自己还年轻（29了算不算年轻啊……），一直希望能够利用自己所喜爱的技术实现在家办公的愿望，所以我于8月7日向经理提出了辞职的想法，8月19日提交的辞职申请，目前正处于一个月的工作交接期内，也就是说，从下个月（9月份）开始，我就可以正式离职并利用三个月时间转型Ruby on Rails + SOHO工作了。</p><p>在这里罗列一下本人的技术状况和这三个月的计划，希望各路有经验的大牛能够根据经验多多提供宝贵意见。</p><p>PS：我之前在北京待了9年，去年初回到西安，家就在西安，所以生活上没有太多顾虑才敢考虑辞职SOHO的。</p><a id="more"></a><p>###本人技术背景</p><ul><li>没上过大学，当了五年兵，所有技术全靠自己从小的兴趣爱好+自学完成</li><li>英语书籍阅读+书写（老外能看明白的水平）</li><li>Windows/Linux/Mac OS X三大操作系统通吃，目前有一台顶配Mac Mini用于接下来的工作和学习=.=</li><li>3年国内传统软件公司工作经验（深恶痛绝……）</li><li>2年敏捷团队+欧美离岸外包项目工作经验</li><li>3年ASP.NET WebForm开发经验</li><li>2年ASP.NET MVC开发经验</li><li>HTML5/CSS3/JQuery神马的常见基础性的东东就不细说了</li></ul><p>###Ruby on Rails 学习经验</p><ul><li>已经自己利用业余时间断断续续学习了近4个月的Ruby on Rails及相关技术</li><li>镐头书、RailsTutorial等书都看过一遍</li><li>RailsCasts订阅用户</li><li>CodeSchool的学习成果 - <a href="http://www.codeschool.com/users/howiehu" target="_blank" rel="noopener">http://www.codeschool.com/users/howiehu</a></li></ul><p>###接下来三个月家里蹲的计划</p><p>第一个月用来复习和充电，准备读一遍下面的书籍，原则是能有中文的就尽可能读中文的节省学习时间：</p><ul><li><a href="http://pragprog.com/book/ruby4/programming-ruby-1-9-2-0" target="_blank" rel="noopener">Programming Ruby 2.0</a> （重读一遍）</li><li><a href="http://railstutorial-china.org/" target="_blank" rel="noopener">Ruby on Rails Tutorial 3rd Edition</a> （重读一遍）</li><li><a href="https://leanpub.com/everydayrailsrspec" target="_blank" rel="noopener">Everyday Rails Testing with RSpec</a></li><li>快速重新过一遍 CodeSchool 的 Rails/CoffeScript/Sass 相关课程</li></ul><p>辅助阅读（三个月时间读完即可）：</p><ul><li><a href="http://www.amazon.cn/gp/product/B005KGBTQ8/ref=oh_details_o01_s00_i00?ie=UTF8&psc=1" target="_blank" rel="noopener">松本行弘的程序世界</a></li><li><a href="http://www.amazon.cn/gp/product/B00D1HUYVE/ref=oh_details_o01_s00_i01?ie=UTF8&psc=1" target="_blank" rel="noopener">代码的未来</a></li><li><a href="http://www.amazon.cn/gp/product/B003KRPG04/ref=oh_details_o00_s00_i00?ie=UTF8&psc=1" target="_blank" rel="noopener">重构(Ruby版)</a></li><li><a href="http://www.amazon.cn/gp/product/B0073APSCK/ref=oh_details_o01_s00_i02?ie=UTF8&psc=1" target="_blank" rel="noopener">Ruby元编程</a></li></ul><p>第一个月剩下的时间和之后的两个月首先来制作 <strong>西安Rubyist</strong> 的网站，用于练手，然后在此过程中接触些实际项目实习一下，之后尽可能的将实习转为全职正式工作。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本人目前就职于北京盛安德科技发展有限公司西安第一分公司，由于趁自己还年轻（29了算不算年轻啊……），一直希望能够利用自己所喜爱的技术实现在家办公的愿望，所以我于8月7日向经理提出了辞职的想法，8月19日提交的辞职申请，目前正处于一个月的工作交接期内，也就是说，从下个月（9月份）开始，我就可以正式离职并利用三个月时间转型Ruby on Rails + SOHO工作了。&lt;/p&gt;
&lt;p&gt;在这里罗列一下本人的技术状况和这三个月的计划，希望各路有经验的大牛能够根据经验多多提供宝贵意见。&lt;/p&gt;
&lt;p&gt;PS：我之前在北京待了9年，去年初回到西安，家就在西安，所以生活上没有太多顾虑才敢考虑辞职SOHO的。&lt;/p&gt;
    
    </summary>
    
    
      <category term="从士兵到程序员再到咨询师" scheme="https://huhao.dev/categories/%E4%BB%8E%E5%A3%AB%E5%85%B5%E5%88%B0%E7%A8%8B%E5%BA%8F%E5%91%98%E5%86%8D%E5%88%B0%E5%92%A8%E8%AF%A2%E5%B8%88/"/>
    
    
      <category term="freelancer" scheme="https://huhao.dev/tags/freelancer/"/>
    
  </entry>
  
</feed>
