<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>胡皓 - 枪炮与代码</title>
  
  <subtitle>从士兵到软件匠人的侃侃而谈</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://huhao.dev/"/>
  <updated>2019-12-26T05:44:45.767Z</updated>
  <id>http://huhao.dev/</id>
  
  <author>
    <name>胡皓</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>领域驱动实战思考（一）：用TDD思想对DDD的协作设计过程进行基准化</title>
    <link href="http://huhao.dev/2019/12/21/%E9%A2%86%E5%9F%9F%E9%A9%B1%E5%8A%A8%E5%AE%9E%E6%88%98%E6%80%9D%E8%80%83%EF%BC%88%E4%B8%80%EF%BC%89%EF%BC%9A%E7%94%A8TDD%E6%80%9D%E6%83%B3%E5%AF%B9DDD%E7%9A%84%E5%8D%8F%E4%BD%9C%E8%AE%BE%E8%AE%A1%E8%BF%87%E7%A8%8B%E8%BF%9B%E8%A1%8C%E5%9F%BA%E5%87%86%E5%8C%96/"/>
    <id>http://huhao.dev/2019/12/21/%E9%A2%86%E5%9F%9F%E9%A9%B1%E5%8A%A8%E5%AE%9E%E6%88%98%E6%80%9D%E8%80%83%EF%BC%88%E4%B8%80%EF%BC%89%EF%BC%9A%E7%94%A8TDD%E6%80%9D%E6%83%B3%E5%AF%B9DDD%E7%9A%84%E5%8D%8F%E4%BD%9C%E8%AE%BE%E8%AE%A1%E8%BF%87%E7%A8%8B%E8%BF%9B%E8%A1%8C%E5%9F%BA%E5%87%86%E5%8C%96/</id>
    <published>2019-12-21T08:30:28.000Z</published>
    <updated>2019-12-26T05:44:45.767Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>在这一年聚焦DDD设计，尤其是DDD的协作设计工作坊的咨询工作中，我发现很多客户总是反馈说一些咨询师的方法论太模糊且落不了地。而这些咨询师则认为其实方法已经说的很清楚了，觉得是客户的人懒，不想干。</p><p>在客户要求提供标准化输出件、操作手册或方法论指南的时候，这些咨询师们大多都会果断拒绝，而且还觉得客户的要求是违背了敏捷宣言中“可工作的软件胜过面面俱到的文档”的价值观。</p><p>但是，我发现其实并不是这么一回事儿，真正的原因是这些咨询师就没有投入足够的研究，去清晰定义自己所售卖的方法论中到底需要多少个阶段，也没有清晰定义每个阶段的输入输出，以及输入和输出之间到底是怎么一步一步清晰且可复用的推演过去的。</p><p>当客户为此挑战他们时，他们则大多会用一句“By Experience”敷衍过去，其实背后是自己根本解释不清楚。</p><p>结合我过去在ThoughtWorks近4年的人员培养和现场教学经验，唯一的解决方案是我们必须要给出方法论清晰的操作步骤和易于理解的解释。</p><a id="more"></a><h2 id="我的基准化思维框架"><a href="#我的基准化思维框架" class="headerlink" title="我的基准化思维框架"></a>我的基准化思维框架</h2><p>通过仔细的思考和观察，通过利用了概念性思考，我发现协作设计工作坊的过程，非常类似于我们的计算机程序模型：</p><blockquote><p><strong>输入 → 处理 → 输出</strong></p></blockquote><p>客户所希望得到的标准化输出件，其实相当于计算机程序模型中的“输入”和“输出”，而推导和产出两个标准化输出件中的具体步骤，则相当于计算机程序模型中的“处理”过程，即可以视作：</p><blockquote><p><strong>前一个过程的输出件 → 操作步骤 → 该环节的输出件</strong></p></blockquote><p>那如果是这样子的话，我就可以采用对待程序的方式，通过测试驱动开发（TDD）的思想来进行方法论的基准化操作了！</p><p>于是我就做了！</p><h2 id="利用TDD的方式进行DDD设计过程的基准化"><a href="#利用TDD的方式进行DDD设计过程的基准化" class="headerlink" title="利用TDD的方式进行DDD设计过程的基准化"></a>利用TDD的方式进行DDD设计过程的基准化</h2><p>在这一年，通过大大小小十数个咨询项目，我使用了以下过程进行了基准化：</p><ul><li>第一步，我通过在不同客户项目的实践中打磨和定义了每个阶段清晰的输出件，产出了《DDD工作坊准入条件和产出物图例》。这一步就相当于通过Tasking确定程序的输入和输出，以及定义测试驱动开发中的测试用例。</li><li>第二步，在确定了输入输出后，我继续通过不同项目的不断打磨，基准化了每一个阶段的操作步骤，并把每一步细化到概念介绍、操作步骤、过程图例、要点提示四个部分，产出了《DDD工作坊操作手册》。这一步就相当于通过测试驱动的方式，进行了程序“处理”过程的实现，并且还通过小步迭代的方式，对操作过程进行了一遍又一遍的迭代。</li><li>第三步，在整个操作手册完成之后，基于操作手册，重新梳理抽象出了适配这个操作手册的最简单和通常的概念，并从整个宏观上优化和定义了新的DDD分段式设计（战略设计阶段、战术设计阶段、技术实现阶段），解决了之前所有我所参与过的DDD培训所看到的知识体系凌乱，不统一，不顺畅等问题，让概念讲解部分最小化，产出了《DDD工作坊概念讲解》课件。这一步就相当于程序设计和开发过程中，通过高度抽象，进行分层架构并实现架构演进的过程。</li><li>第四步，通过项目开发实践和进一步总结，结合多种以领域为核心的分层架构思想，不断打磨形成了适配整个基准化DDD的<a href="https://github.com/howiehu/ddd-architecture-samples" target="_blank" rel="noopener">基准化代码样例</a>。实现了代码化落地。</li><li>第五步，继续通过不断的实践、打磨和总结，产出《DDD成熟度评估标准》。</li></ul><p>以上全部环节，充分采用和实现了我们对待程序设计所提倡的“简单设计（增量式设计）”思想，不带入任何冗余，以便能够让其他人快速理解和复用。</p><h2 id="结果"><a href="#结果" class="headerlink" title="结果"></a>结果</h2><p>基准化的领域驱动设计产出物如下：</p><ul><li><a href="https://pan.baidu.com/s/10eVNdJ0kN5dPZX1On7V5bg" target="_blank" rel="noopener">《DDD工作坊准入条件和产出物图例》</a>（提取码: 9jza）</li><li><a href="https://pan.baidu.com/s/16zP-QFuljJqQeE4PWovG4g" target="_blank" rel="noopener">《DDD工作坊操作手册》</a>（提取码: uu1d）</li><li><a href="https://pan.baidu.com/s/1PnXfqr1RsGG-z9QXTGY4Uw" target="_blank" rel="noopener">《DDD工作坊概念讲解》</a>（提取码: b4ft）</li><li><a href="https://github.com/howiehu/ddd-architecture-samples" target="_blank" rel="noopener">《DDD基准化代码结构样例》</a></li><li>《DDD成熟度评估标准》(还在完善中，请期待)</li></ul><p>对于这些基准化的产出，我已经通过带领7个新咨询师进行了可复用性的验证，这些新咨询师只需要通过我讲解或示范一遍，就能够独立承担后续的DDD设计咨询工作，并且还能够实现概念和手法的一致性。</p><p>至于“By Experience”，则只剩操作者个人经验的高低，和智商的天花板了。</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;在这一年聚焦DDD设计，尤其是DDD的协作设计工作坊的咨询工作中，我发现很多客户总是反馈说一些咨询师的方法论太模糊且落不了地。而这些咨询师则认为其实方法已经说的很清楚了，觉得是客户的人懒，不想干。&lt;/p&gt;
&lt;p&gt;在客户要求提供标准化输出件、操作手册或方法论指南的时候，这些咨询师们大多都会果断拒绝，而且还觉得客户的要求是违背了敏捷宣言中“可工作的软件胜过面面俱到的文档”的价值观。&lt;/p&gt;
&lt;p&gt;但是，我发现其实并不是这么一回事儿，真正的原因是这些咨询师就没有投入足够的研究，去清晰定义自己所售卖的方法论中到底需要多少个阶段，也没有清晰定义每个阶段的输入输出，以及输入和输出之间到底是怎么一步一步清晰且可复用的推演过去的。&lt;/p&gt;
&lt;p&gt;当客户为此挑战他们时，他们则大多会用一句“By Experience”敷衍过去，其实背后是自己根本解释不清楚。&lt;/p&gt;
&lt;p&gt;结合我过去在ThoughtWorks近4年的人员培养和现场教学经验，唯一的解决方案是我们必须要给出方法论清晰的操作步骤和易于理解的解释。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Domain Driven Development" scheme="http://huhao.dev/categories/Domain-Driven-Development/"/>
    
    
      <category term="DDD" scheme="http://huhao.dev/tags/DDD/"/>
    
      <category term="TDD" scheme="http://huhao.dev/tags/TDD/"/>
    
  </entry>
  
</feed>
